menu "Command line interface"

config UBOOT_CONFIG_CMDLINE
	bool "Support U-Boot commands"
	default y
	help
	  Enable U-Boot's command-line functions. This provides a means
	  to enter commands into U-Boot for a wide variety of purposes. It
	  also allows scripts (containing commands) to be executed.
	  Various commands and command categorys can be indivdually enabled.
	  Depending on the number of commands enabled, this can add
	  substantially to the size of U-Boot.

config UBOOT_CONFIG_HUSH_PARSER
	bool "Use hush shell"
	depends on UBOOT_CONFIG_CMDLINE
	help
	  This option enables the "hush" shell (from Busybox) as command line
	  interpreter, thus enabling powerful command line syntax like
	  if...then...else...fi conditionals or `&&' and '||'
	  constructs ("shell scripts").

	  If disabled, you get the old, much simpler behaviour with a somewhat
	  smaller memory footprint.

config UBOOT_CONFIG_CMDLINE_EDITING
	bool "Enable command line editing"
	depends on UBOOT_CONFIG_CMDLINE
	default y
	help
	  Enable editing and History functions for interactive command line
	  input operations

config UBOOT_CONFIG_AUTO_COMPLETE
	bool "Enable auto complete using TAB"
	depends on UBOOT_CONFIG_CMDLINE
	default y
	help
	  Enable auto completion of commands using TAB.

config UBOOT_CONFIG_SYS_LONGHELP
	bool "Enable long help messages"
	depends on UBOOT_CONFIG_CMDLINE
	default y if UBOOT_CONFIG_CMDLINE
	help
	  Defined when you want long help messages included
	  Do not set this option when short of memory.

config UBOOT_CONFIG_SYS_PROMPT
	string "Shell prompt"
	default "Zynq> " if UBOOT_CONFIG_ARCH_ZYNQ
	default "ZynqMP> " if UBOOT_CONFIG_ARCH_ZYNQMP
	default "=> "
	help
	  This string is displayed in the command line to the left of the
	  cursor.

config UBOOT_CONFIG_SYS_PROMPT_HUSH_PS2
	string "Hush shell secondary prompt"
	depends on UBOOT_CONFIG_HUSH_PARSER
	default "> "
	help
	  This defines the secondary prompt string, which is
	  printed when the command interpreter needs more input
	  to complete a command. Usually "> ".

config UBOOT_CONFIG_SYS_XTRACE
	bool "Command execution tracer"
	depends on UBOOT_CONFIG_CMDLINE
	default y if UBOOT_CONFIG_CMDLINE
	help
	  This option enables the possiblity to print all commands before
	  executing them and after all variables are evaluated (similar
	  to Bash's xtrace/'set -x' feature).
	  To enable the tracer a variable "xtrace" needs to be defined in
	  the environment.

config UBOOT_CONFIG_BUILD_BIN2C
	bool

comment "Commands"

menu "Info commands"

config UBOOT_CONFIG_CMD_ACPI
	bool "acpi"
	depends on UBOOT_CONFIG_ACPIGEN
	default y
	help
	  List and dump ACPI tables. ACPI (Advanced Configuration and Power
	  Interface) is used mostly on x86 for providing information to the
	  Operating System about devices in the system. The tables are set up
	  by the firmware, typically U-Boot but possibly an earlier firmware
	  module, if U-Boot is chain-loaded from something else. ACPI tables
	  can also include code, to perform hardware-specific tasks required
	  by the Operating Systems. This allows some amount of separation
	  between the firmware and OS, and is particularly useful when you
	  want to make hardware changes without the OS needing to be adjusted.

config UBOOT_CONFIG_CMD_ADDRMAP
	bool "addrmap"
	depends on UBOOT_CONFIG_ADDR_MAP
	default y
	help
	  List non-identity virtual-physical memory mappings for 32-bit CPUs.

config UBOOT_CONFIG_CMD_BDI
	bool "bdinfo"
	default y
	help
	  Print board info

config UBOOT_CONFIG_CMD_CONFIG
	bool "config"
	default UBOOT_CONFIG_SANDBOX
	select UBOOT_CONFIG_BUILD_BIN2C
	help
	  Print ".config" contents.

	  If this option is enabled, the ".config" file contents are embedded
	  in the U-Boot image and can be printed on the console by the "config"
	  command.  This provides information of which options are enabled on
	  the running U-Boot.

config UBOOT_CONFIG_CMD_CONSOLE
	bool "coninfo"
	default y
	help
	  Print console devices and information.

config UBOOT_CONFIG_CMD_CPU
	bool "cpu"
	depends on UBOOT_CONFIG_CPU
	help
	  Print information about available CPUs. This normally shows the
	  number of CPUs, type (e.g. manufacturer, architecture, product or
	  internal name) and clock frequency. Other information may be
	  available depending on the CPU driver.

config UBOOT_CONFIG_CMD_LICENSE
	bool "license"
	select UBOOT_CONFIG_BUILD_BIN2C
	help
	  Print GPL license text

config UBOOT_CONFIG_CMD_PMC
	bool "pmc"
	help
	  Provides access to the Intel Power-Management Controller (PMC) so
	  that its state can be examined. This does not currently support
	  changing the state but it is still useful for debugging and seeing
	  what is going on.

config UBOOT_CONFIG_CMD_REGINFO
	bool "reginfo"
	depends on UBOOT_CONFIG_PPC
	help
	  Register dump

config UBOOT_CONFIG_CMD_TLV_EEPROM
	bool "tlv_eeprom"
	depends on UBOOT_CONFIG_I2C_EEPROM
	help
	  Display and program the system EEPROM data block in ONIE Tlvinfo
	  format. TLV stands for Type-Length-Value.

config UBOOT_CONFIG_SPL_CMD_TLV_EEPROM
	bool "tlv_eeprom for SPL"
	depends on UBOOT_CONFIG_SPL_I2C_EEPROM
	select UBOOT_CONFIG_SPL_DRIVERS_MISC
	help
	  Read system EEPROM data block in ONIE Tlvinfo format from SPL.

config UBOOT_CONFIG_CMD_SBI
	bool "sbi"
	depends on UBOOT_CONFIG_RISCV_SMODE && UBOOT_CONFIG_SBI_V02
	help
	  Display information about the SBI implementation.

endmenu

menu "Boot commands"

config UBOOT_CONFIG_CMD_BOOTD
	bool "bootd"
	default y
	help
	  Run the command stored in the environment "bootcmd", i.e.
	  "bootd" does the same thing as "run bootcmd".

config UBOOT_CONFIG_CMD_BOOTM
	bool "bootm"
	default y
	help
	  Boot an application image from the memory.

config UBOOT_CONFIG_CMD_BOOTM_PRE_LOAD
       bool "enable pre-load on bootm"
       depends on UBOOT_CONFIG_CMD_BOOTM
       depends on UBOOT_CONFIG_IMAGE_PRE_LOAD
       default n
       help
         Enable support of stage pre-load for the bootm command.
	 This stage allow to check or modify the image provided
	 to the bootm command.

config UBOOT_CONFIG_BOOTM_EFI
	bool "Support booting UEFI FIT images"
	depends on UBOOT_CONFIG_CMD_BOOTEFI && UBOOT_CONFIG_CMD_BOOTM && UBOOT_CONFIG_FIT
	default y
	help
	  Support booting UEFI FIT images via the bootm command.

config UBOOT_CONFIG_CMD_BOOTZ
	bool "bootz"
	help
	  Boot the Linux zImage

config UBOOT_CONFIG_CMD_BOOTI
	bool "booti"
	depends on UBOOT_CONFIG_ARM64 || UBOOT_CONFIG_RISCV
	default y
	help
	  Boot an AArch64 Linux Kernel image from memory.

config UBOOT_CONFIG_BOOTM_LINUX
	bool "Support booting Linux OS images"
	depends on UBOOT_CONFIG_CMD_BOOTM || UBOOT_CONFIG_CMD_BOOTZ || UBOOT_CONFIG_CMD_BOOTI
	default y
	help
	  Support booting the Linux kernel directly via a command such as bootm
	  or booti or bootz.

config UBOOT_CONFIG_BOOTM_NETBSD
	bool "Support booting NetBSD (non-EFI) loader images"
	depends on UBOOT_CONFIG_CMD_BOOTM
	default y
	help
	  Support booting NetBSD via the bootm command.

config UBOOT_CONFIG_BOOTM_OPENRTOS
	bool "Support booting OPENRTOS / FreeRTOS images"
	depends on UBOOT_CONFIG_CMD_BOOTM
	help
	  Support booting OPENRTOS / FreeRTOS via the bootm command.

config UBOOT_CONFIG_BOOTM_OSE
	bool "Support booting Enea OSE images"
	depends on (ARM && (ARM64 || UBOOT_CONFIG_CPU_V7A || UBOOT_CONFIG_CPU_V7R) || UBOOT_CONFIG_SANDBOX || UBOOT_CONFIG_PPC || UBOOT_CONFIG_X86)
	depends on UBOOT_CONFIG_CMD_BOOTM
	help
	  Support booting Enea OSE images via the bootm command.

config UBOOT_CONFIG_BOOTM_PLAN9
	bool "Support booting Plan9 OS images"
	depends on UBOOT_CONFIG_CMD_BOOTM
	default y
	help
	  Support booting Plan9 images via the bootm command.

config UBOOT_CONFIG_BOOTM_RTEMS
	bool "Support booting RTEMS OS images"
	depends on UBOOT_CONFIG_CMD_BOOTM
	default y
	help
	  Support booting RTEMS images via the bootm command.

config UBOOT_CONFIG_BOOTM_VXWORKS
	bool "Support booting VxWorks OS images"
	depends on UBOOT_CONFIG_CMD_BOOTM
	default y
	help
	  Support booting VxWorks images via the bootm command.

config UBOOT_CONFIG_CMD_BOOTEFI
	bool "bootefi"
	depends on UBOOT_CONFIG_EFI_LOADER
	default y
	help
	  Boot an EFI image from memory.

config UBOOT_CONFIG_CMD_BOOTEFI_HELLO_COMPILE
	bool "Compile a standard EFI hello world binary for testing"
	depends on UBOOT_CONFIG_CMD_BOOTEFI && !UBOOT_CONFIG_CPU_V7M
	default y
	help
	  This compiles a standard EFI hello world application with U-Boot so
	  that it can be used with the test/py testing framework. This is useful
	  for testing that EFI is working at a basic level, and for bringing
	  up EFI support on a new architecture.

	  No additional space will be required in the resulting U-Boot binary
	  when this option is enabled.

config UBOOT_CONFIG_CMD_BOOTEFI_HELLO
	bool "Allow booting a standard EFI hello world for testing"
	depends on UBOOT_CONFIG_CMD_BOOTEFI_HELLO_COMPILE
	default y if UBOOT_CONFIG_CMD_BOOTEFI_SELFTEST
	help
	  This adds a standard EFI hello world application to U-Boot so that
	  it can be used with the 'bootefi hello' command. This is useful
	  for testing that EFI is working at a basic level, and for bringing
	  up EFI support on a new architecture.

config UBOOT_CONFIG_CMD_UPGRADE
	bool "upgrade"
	default y if UBOOT_CONFIG_VENDOR_MAXLINEAR
	help
	  Support LGM image upgrade command.

source "../lib/efi_selftest/Kconfig"

config UBOOT_CONFIG_CMD_BOOTMENU
	bool "bootmenu"
	select UBOOT_CONFIG_MENU
	help
	  Add an ANSI terminal boot menu command.

config UBOOT_CONFIG_CMD_ADTIMG
	bool "adtimg"
	help
	  Android DTB/DTBO image manipulation commands. Read dtb/dtbo files from
	  image into RAM, dump image structure information, etc. Those dtb/dtbo
	  files should be merged in one dtb further, which needs to be passed to
	  the kernel, as part of a boot process.

config UBOOT_CONFIG_CMD_ABOOTIMG
	bool "abootimg"
	depends on UBOOT_CONFIG_ANDROID_BOOT_IMAGE
	help
	  Android Boot Image manipulation commands. Allows one to extract
	  images contained in boot.img, like kernel, ramdisk, dtb, etc, and
	  obtain corresponding meta-information from boot.img.

	  See doc/android/boot-image.rst for details.

config UBOOT_CONFIG_CMD_ELF
	bool "bootelf, bootvx"
	default y
	select UBOOT_CONFIG_LIB_ELF
	help
	  Boot an ELF/vxWorks image from the memory.

config UBOOT_CONFIG_CMD_FIT_LOAD
	bool "Load FIT format containing DTBOs"
	depends on UBOOT_CONFIG_DRIVER_LIGHTNING
	help
	  Load FIT image containing DTBO files and apply it to the base DTB

config UBOOT_CONFIG_CMD_FDT
	bool "Flattened Device Tree utility commands"
	default y
	depends on UBOOT_CONFIG_OF_LIBFDT
	help
	  Do FDT related setup before booting into the Operating System.

config UBOOT_CONFIG_SUPPORT_EXTENSION_SCAN
	bool

config UBOOT_CONFIG_CMD_EXTENSION
	bool "Extension board management command"
	select UBOOT_CONFIG_CMD_FDT
	depends on UBOOT_CONFIG_SUPPORT_EXTENSION_SCAN
	help
	  Enables the "extension" command, which allows to detect
	  extension boards connected to the system, and apply
	  corresponding Device Tree overlays.

config UBOOT_CONFIG_CMD_GO
	bool "go"
	default y
	help
	  Start an application at a given address.

config UBOOT_CONFIG_CMD_RUN
	bool "run"
	default y
	help
	  Run the command in the given environment variable.

config UBOOT_CONFIG_CMD_IMI
	bool "iminfo"
	default y
	help
	  Print header information for application image.

config UBOOT_CONFIG_CMD_IMLS
	bool "imls"
	help
	  List all images found in flash

config UBOOT_CONFIG_CMD_XIMG
	bool "imxtract"
	default y
	help
	  Extract a part of a multi-image.

config UBOOT_CONFIG_CMD_SPL
	bool "spl export - Export boot information for Falcon boot"
	depends on UBOOT_CONFIG_SPL
	help
	  Falcon mode allows booting directly from SPL into an Operating
	  System such as Linux, thus skipping U-Boot proper. See
	  doc/README.falcon for full information about how to use this
	  command.

config UBOOT_CONFIG_CMD_SPL_NAND_OFS
	hex "Offset of OS args or dtb for Falcon-mode NAND boot"
	depends on UBOOT_CONFIG_CMD_SPL && (TPL_NAND_SUPPORT || UBOOT_CONFIG_SPL_NAND_SUPPORT)
	default 0
	help
	  This provides the offset of the command line arguments for Linux
	  when booting from NAND in Falcon mode.  See doc/README.falcon
	  for full information about how to use this option (and also see
	  board/gateworks/gw_ventana/README for an example).

config UBOOT_CONFIG_CMD_SPL_NOR_OFS
	hex "Offset of OS args or dtb for Falcon-mode NOR boot"
	depends on UBOOT_CONFIG_CMD_SPL && UBOOT_CONFIG_SPL_NOR_SUPPORT
	default 0
	help
	  This provides the offset of the command line arguments or dtb for
	  Linux when booting from NOR in Falcon mode.

config UBOOT_CONFIG_CMD_SPL_WRITE_SIZE
	hex "Size of argument area"
	depends on UBOOT_CONFIG_CMD_SPL
	default 0x2000
	help
	  This provides the size of the command-line argument area in NAND
	  flash used by Falcon-mode boot. See the documentation until CMD_SPL
	  for detail.

config UBOOT_CONFIG_CMD_THOR_DOWNLOAD
	bool "thor - TIZEN 'thor' download"
	select UBOOT_CONFIG_DFU
	help
	  Implements the 'thor' download protocol. This is a way of
	  downloading a software update over USB from an attached host.
	  There is no documentation about this within the U-Boot source code
	  but you should be able to find something on the interwebs.

config UBOOT_CONFIG_CMD_ZBOOT
	bool "zboot - x86 boot command"
	help
	  With x86 machines it is common to boot a bzImage file which
	  contains both a kernel and a setup.bin file. The latter includes
	  configuration information from the dark ages which x86 boards still
	  need to pick things out of.

	  Consider using FIT in preference to this since it supports directly
	  booting both 32- and 64-bit kernels, as well as secure boot.
	  Documentation is available in doc/uImage.FIT/x86-fit-boot.txt

endmenu

menu "Environment commands"

config UBOOT_CONFIG_CMD_ASKENV
	bool "ask for env variable"
	help
	  Ask for environment variable

config UBOOT_CONFIG_CMD_EXPORTENV
	bool "env export"
	default y
	help
	  Export environments.

config UBOOT_CONFIG_CMD_IMPORTENV
	bool "env import"
	default y
	help
	  Import environments.

config UBOOT_CONFIG_CMD_EDITENV
	bool "editenv"
	default y
	help
	  Edit environment variable.

config UBOOT_CONFIG_CMD_GREPENV
	bool "search env"
	help
	  Allow for searching environment variables

config UBOOT_CONFIG_CMD_SAVEENV
	bool "saveenv"
	default y
	help
	  Save all environment variables into the compiled-in persistent
	  storage.

config UBOOT_CONFIG_CMD_ERASEENV
	bool "eraseenv"
	depends on UBOOT_CONFIG_CMD_SAVEENV
	help
	  Erase environment variables from the compiled-in persistent
	  storage.

config UBOOT_CONFIG_CMD_ENV_EXISTS
	bool "env exists"
	default y
	help
	  Check if a variable is defined in the environment for use in
	  shell scripting.

config UBOOT_CONFIG_CMD_ENV_CALLBACK
	bool "env callbacks - print callbacks and their associated variables"
	help
	  Some environment variable have callbacks defined by
	  U_BOOT_ENV_CALLBACK. These are called when the variable changes.
	  For example changing "baudrate" adjust the serial baud rate. This
	  command lists the currently defined callbacks.

config UBOOT_CONFIG_CMD_ENV_FLAGS
	bool "env flags -print variables that have non-default flags"
	help
	  Some environment variables have special flags that control their
	  behaviour. For example, serial# can only be written once and cannot
	  be deleted. This command shows the variables that have special
	  flags.

config UBOOT_CONFIG_CMD_NVEDIT_EFI
	bool "env [set|print] -e - set/print UEFI variables"
	depends on UBOOT_CONFIG_EFI_LOADER
	imply HEXDUMP
	help
	  UEFI variables are encoded as some form of U-Boot variables.
	  If enabled, we are allowed to set/print UEFI variables using
	  "env" command with "-e" option without knowing details.

config UBOOT_CONFIG_CMD_NVEDIT_INFO
	bool "env info - print or evaluate environment information"
	help
	  Print environment information:
	  - env_valid : is environment valid
	  - env_ready : is environment imported into hash table
	  - env_use_default : is default environment used

	  This command can be optionally used for evaluation in scripts:
	  [-d] : evaluate whether default environment is used
	  [-p] : evaluate whether environment can be persisted
	  [-q] : quiet output
	  The result of multiple evaluations will be combined with AND.

config UBOOT_CONFIG_CMD_NVEDIT_LOAD
	bool "env load"
	help
	  Load all environment variables from the compiled-in persistent
	  storage.

config UBOOT_CONFIG_CMD_NVEDIT_SELECT
	bool "env select"
	help
	  Select the compiled-in persistent storage of environment variables.

endmenu

menu "Memory commands"

config UBOOT_CONFIG_CMD_BINOP
	bool "binop"
	help
	  Compute binary operations (xor, or, and) of byte arrays of arbitrary
	  size from memory and store the result in memory or the environment.

config UBOOT_CONFIG_CMD_BLOBLIST
	bool "bloblist"
	default y if UBOOT_CONFIG_BLOBLIST
	help
	  Show information about the bloblist, a collection of binary blobs
	  held in memory that persist between SPL and U-Boot. In the case of
	  x86 devices the bloblist can be used to hold ACPI tables so that they
	  remain available in memory.

config UBOOT_CONFIG_CMD_CRC32
	bool "crc32"
	default y
	select UBOOT_CONFIG_HASH
	help
	  Compute CRC32.

config UBOOT_CONFIG_CRC32_VERIFY
	bool "crc32 -v"
	depends on UBOOT_CONFIG_CMD_CRC32
	help
	  Add -v option to verify data against a crc32 checksum.

config UBOOT_CONFIG_CMD_EEPROM
	bool "eeprom - EEPROM subsystem"
	help
	  (deprecated, needs conversion to driver model)
	  Provides commands to read and write EEPROM (Electrically Erasable
	  Programmable Read Only Memory) chips that are connected over an
	  I2C bus.

config UBOOT_CONFIG_CMD_EEPROM_LAYOUT
	bool "Enable layout-aware eeprom commands"
	depends on UBOOT_CONFIG_CMD_EEPROM
	help
	  (deprecated, needs conversion to driver model)
	  When enabled, additional eeprom sub-commands become available.

	  eeprom print - prints the contents of the eeprom in a human-readable
	  way (eeprom layout fields, and data formatted to be fit for human
	  consumption).

	  eeprom update - allows user to update eeprom fields by specifying
	  the field name, and providing the new data in a human readable format
	  (same format as displayed by the eeprom print command).

	  Both commands can either auto detect the layout, or be told which
	  layout to use.

	  Feature API:
	  __weak int parse_layout_version(char *str)
		- override to provide your own layout name parsing
	  __weak void __eeprom_layout_assign(struct eeprom_layout *layout,
			int layout_version);
		- override to setup the layout metadata based on the version
	  __weak int eeprom_layout_detect(unsigned char *data)
		- override to provide your own algorithm for detecting layout
			version
	  eeprom_field.c
		- contains various printing and updating functions for common
			types of eeprom fields. Can be used for defining
			custom layouts.

config UBOOT_CONFIG_EEPROM_LAYOUT_HELP_STRING
	  string "Tells user what layout names are supported"
	  depends on UBOOT_CONFIG_CMD_EEPROM_LAYOUT
	  default "<not defined>"
	  help
	    Help printed with the LAYOUT VERSIONS part of the 'eeprom'
	    command's help.

config UBOOT_CONFIG_SYS_I2C_EEPROM_BUS
	int "I2C bus of the EEPROM device."
	depends on UBOOT_CONFIG_CMD_EEPROM
	default 0

config UBOOT_CONFIG_SYS_I2C_EEPROM_ADDR_LEN
	int "Length in bytes of the EEPROM memory array address"
	depends on UBOOT_CONFIG_CMD_EEPROM || UBOOT_CONFIG_ID_EEPROM
	default 1
	range 1 2
	help
	  Note: This is NOT the chip address length!

config UBOOT_CONFIG_SYS_EEPROM_SIZE
	depends on UBOOT_CONFIG_CMD_EEPROM
	int "Size in bytes of the EEPROM device"
	default 256

config UBOOT_CONFIG_SYS_EEPROM_PAGE_WRITE_BITS
	int "Number of bits used to address bytes in a single page"
	depends on UBOOT_CONFIG_CMD_EEPROM
	default 8
	help
	  The EEPROM page size is 2^SYS_EEPROM_PAGE_WRITE_BITS.
	  A 64 byte page, for example would require six bits.

config UBOOT_CONFIG_SYS_EEPROM_PAGE_WRITE_DELAY_MS
	int "Number of milliseconds to delay between page writes"
	depends on UBOOT_CONFIG_CMD_EEPROM || UBOOT_CONFIG_CMD_I2C
	default 0

config UBOOT_CONFIG_LOOPW
	bool "loopw"
	help
	  Infinite write loop on address range

config UBOOT_CONFIG_CMD_MD5SUM
	bool "md5sum"
	select UBOOT_CONFIG_MD5
	help
	  Compute MD5 checksum.

config UBOOT_CONFIG_MD5SUM_VERIFY
	bool "md5sum -v"
	depends on UBOOT_CONFIG_CMD_MD5SUM
	help
	  Add -v option to verify data against an MD5 checksum.

config UBOOT_CONFIG_CMD_MEMINFO
	bool "meminfo"
	help
	  Display memory information.

config UBOOT_CONFIG_CMD_MEMORY
	bool "md, mm, nm, mw, cp, cmp, base, loop"
	default y
	help
	  Memory commands.
	    md - memory display
	    mm - memory modify (auto-incrementing address)
	    nm - memory modify (constant address)
	    mw - memory write (fill)
	    cp - memory copy
	    cmp - memory compare
	    base - print or set address offset
	    loop - initialize loop on address range

config UBOOT_CONFIG_CMD_MEM_SEARCH
	bool "ms - Memory search"
	help
	  Memory-search command

	  This allows searching through a region of memory looking for hex
	  data (byte, 16-bit word, 32-bit long, also 64-bit on machines that
	  support it). It is also possible to search for a string. The
	  command accepts a memory range and a list of values to search for.
	  The values need to appear in memory in the same order they are given
	  in the command. At most 10 matches can be returned at a time, but
	  pressing return will show the next 10 matches. Environment variables
	  are set for use with scripting (memmatches, memaddr, mempos).

config UBOOT_CONFIG_CMD_MX_CYCLIC
	bool "Enable cyclic md/mw commands"
	depends on UBOOT_CONFIG_CMD_MEMORY
	help
          Add the "mdc" and "mwc" memory commands. These are cyclic
          "md/mw" commands.
          Examples:

	  => mdc.b 10 4 500
	  This command will print 4 bytes (10,11,12,13) each 500 ms.

	  => mwc.l 100 12345678 10
	  This command will write 12345678 to address 100 all 10 ms.

config UBOOT_CONFIG_CMD_RANDOM
	bool "random"
	default y
	depends on UBOOT_CONFIG_CMD_MEMORY && (LIB_RAND || UBOOT_CONFIG_LIB_HW_RAND)
	help
	  random - fill memory with random data

config UBOOT_CONFIG_CMD_MEMTEST
	bool "memtest"
	help
	  Simple RAM read/write test.

if UBOOT_CONFIG_CMD_MEMTEST

config UBOOT_CONFIG_SYS_ALT_MEMTEST
	bool "Alternative test"
	help
	  Use a more complete alternative memory test.

if UBOOT_CONFIG_SYS_ALT_MEMTEST

config UBOOT_CONFIG_SYS_ALT_MEMTEST_BITFLIP
	bool "Bitflip test"
	default y
	help
	  The alternative memory test includes bitflip test since 2020.07.
	  The bitflip test significantly increases the overall test time.
	  Bitflip test can optionally be disabled here.

endif

config UBOOT_CONFIG_SYS_MEMTEST_START
	hex "default start address for mtest"
	default 0
	help
	  This is the default start address for mtest for simple read/write
	  test. If no arguments are given to mtest, default address is used
	  as start address.

config UBOOT_CONFIG_SYS_MEMTEST_END
	hex "default end address for mtest"
	default 0x1000
	help
	  This is the default end address for mtest for simple read/write
	  test. If no arguments are given to mtest, default address is used
	  as end address.

endif

config UBOOT_CONFIG_CMD_SHA1SUM
	bool "sha1sum"
	select UBOOT_CONFIG_SHA1
	help
	  Compute SHA1 checksum.

config UBOOT_CONFIG_SHA1SUM_VERIFY
	bool "sha1sum -v"
	depends on UBOOT_CONFIG_CMD_SHA1SUM
	help
	  Add -v option to verify data against a SHA1 checksum.

config UBOOT_CONFIG_CMD_STRINGS
	bool "strings - display strings in memory"
	help
	  This works similarly to the Unix 'strings' command except that it
	  works with a memory range. String of printable characters found
	  within the range are displayed. The minimum number of characters
	  for a sequence to be considered a string can be provided.

endmenu

menu "Compression commands"

config UBOOT_CONFIG_CMD_LZMADEC
	bool "lzmadec"
	default y if UBOOT_CONFIG_CMD_BOOTI
	select UBOOT_CONFIG_LZMA
	help
	  Support decompressing an LZMA (Lempel-Ziv-Markov chain algorithm)
	  image from memory.

config UBOOT_CONFIG_CMD_UNLZ4
	bool "unlz4"
	default y if UBOOT_CONFIG_CMD_BOOTI
	select UBOOT_CONFIG_LZ4
	help
	  Support decompressing an LZ4 image from memory region.

config UBOOT_CONFIG_CMD_UNZIP
	bool "unzip"
	default y if UBOOT_CONFIG_CMD_BOOTI
	select UBOOT_CONFIG_GZIP
	help
	  Uncompress a zip-compressed memory region.

config UBOOT_CONFIG_CMD_ZIP
	bool "zip"
	select UBOOT_CONFIG_GZIP_COMPRESSED
	help
	  Compress a memory region with zlib deflate method.

endmenu

menu "Device access commands"

config UBOOT_CONFIG_CMD_ARMFLASH
	#depends on FLASH_CFI_DRIVER
	bool "armflash"
	help
	  ARM Ltd reference designs flash partition access

config UBOOT_CONFIG_CMD_ADC
	bool "adc - Access Analog to Digital Converters info and data"
	select UBOOT_CONFIG_ADC
	depends on UBOOT_CONFIG_DM_REGULATOR
	help
	  Shows ADC device info and permit printing one-shot analog converted
	  data from a named Analog to Digital Converter.

config UBOOT_CONFIG_CMD_BCB
	bool "bcb"
	depends on UBOOT_CONFIG_MMC
	depends on UBOOT_CONFIG_PARTITIONS
	help
	  Read/modify/write the fields of Bootloader Control Block, usually
	  stored on the flash "misc" partition with its structure defined in:
	  https://android.googlesource.com/platform/bootable/recovery/+/master/
	  bootloader_message/include/bootloader_message/bootloader_message.h

	  Some real-life use-cases include (but are not limited to):
	  - Determine the "boot reason" (and act accordingly):
	    https://source.android.com/devices/bootloader/boot-reason
	  - Get/pass a list of commands from/to recovery:
	    https://android.googlesource.com/platform/bootable/recovery
	  - Inspect/dump the contents of the BCB fields

config UBOOT_CONFIG_CMD_BIND
	bool "bind/unbind - Bind or unbind a device to/from a driver"
	depends on UBOOT_CONFIG_DM
	help
	  Bind or unbind a device to/from a driver from the command line.
	  This is useful in situations where a device may be handled by several
	  drivers. For example, this can be used to bind a UDC to the usb ether
	  gadget driver from the command line.

config UBOOT_CONFIG_CMD_CLK
	bool "clk - Show clock frequencies"
	help
	  (deprecated)
	  Shows clock frequences by calling a sock_clk_dump() hook function.
	  This is depreated in favour of using the CLK uclass and accessing
	  clock values from associated drivers. However currently no command
	  exists for this.

config UBOOT_CONFIG_CMD_DEMO
	bool "demo - Demonstration commands for driver model"
	depends on UBOOT_CONFIG_DM
	help
	  Provides a 'demo' command which can be used to play around with
	  driver model. To use this properly you will need to enable one or
	  both of the demo devices (DM_DEMO_SHAPE and DM_DEMO_SIMPLE).
	  Otherwise you will always get an empty list of devices. The demo
	  devices are defined in the sandbox device tree, so the easiest
	  option is to use sandbox and pass the -d point to sandbox's
	  u-boot.dtb file.

config UBOOT_CONFIG_CMD_DFU
	bool "dfu"
	select UBOOT_CONFIG_DFU
	help
	  Enables the command "dfu" which is used to have U-Boot create a DFU
	  class device via USB. This command requires that the "dfu_alt_info"
	  environment variable be set and define the alt settings to expose to
	  the host.

config UBOOT_CONFIG_CMD_DM
	bool "dm - Access to driver model information"
	depends on UBOOT_CONFIG_DM
	help
	  Provides access to driver model data structures and information,
	  such as a list of devices, list of uclasses and the state of each
	  device (e.g. activated). This is not required for operation, but
	  can be useful to see the state of driver model for debugging or
	  interest.

config UBOOT_CONFIG_CMD_FASTBOOT
	bool "fastboot - Android fastboot support"
	depends on UBOOT_CONFIG_FASTBOOT
	help
	  This enables the command "fastboot" which enables the Android
	  fastboot mode for the platform. Fastboot is a protocol for
	  downloading images, flashing and device control used on
	  Android devices. Fastboot requires either the network stack
	  enabled or support for acting as a USB device.

	  See doc/android/fastboot.rst for more information.

config UBOOT_CONFIG_CMD_FLASH
	bool "flinfo, erase, protect"
	default y
	depends on UBOOT_CONFIG_MTD || UBOOT_CONFIG_FLASH_CFI_DRIVER || UBOOT_CONFIG_MTD_NOR_FLASH
	help
	  NOR flash support.
	    flinfo - print FLASH memory information
	    erase - FLASH memory
	    protect - enable or disable FLASH write protection

config UBOOT_CONFIG_CMD_FPGA
	bool "fpga"
	depends on UBOOT_CONFIG_FPGA
	default y
	help
	  FPGA support.

config UBOOT_CONFIG_CMD_FPGA_LOADBP
	bool "fpga loadbp - load partial bitstream (Xilinx only)"
	depends on UBOOT_CONFIG_CMD_FPGA
	help
	  Supports loading an FPGA device from a bitstream buffer containing
	  a partial bitstream.

config UBOOT_CONFIG_CMD_FPGA_LOADFS
	bool "fpga loadfs - load bitstream from FAT filesystem (Xilinx only)"
	depends on UBOOT_CONFIG_CMD_FPGA
	help
	  Supports loading an FPGA device from a FAT filesystem.

config UBOOT_CONFIG_CMD_FPGA_LOADMK
	bool "fpga loadmk - load bitstream from image"
	depends on UBOOT_CONFIG_CMD_FPGA
	help
	  Supports loading an FPGA device from a image generated by mkimage.

config UBOOT_CONFIG_CMD_FPGA_LOADP
	bool "fpga loadp - load partial bitstream"
	depends on UBOOT_CONFIG_CMD_FPGA
	help
	  Supports loading an FPGA device from a bitstream buffer containing
	  a partial bitstream.

config UBOOT_CONFIG_CMD_FPGA_LOAD_SECURE
	bool "fpga loads - loads secure bitstreams (Xilinx only)"
	depends on UBOOT_CONFIG_CMD_FPGA
	help
	  Enables the fpga loads command which is used to load secure
	  (authenticated or encrypted or both) bitstreams on to FPGA.

config UBOOT_CONFIG_CMD_FPGAD
	bool "fpgad - dump FPGA registers"
	help
	  (legacy, needs conversion to driver model)
	  Provides a way to dump FPGA registers by calling the board-specific
	  fpga_get_reg() function. This functions similarly to the 'md'
	  command.

config UBOOT_CONFIG_CMD_FUSE
	bool "fuse - support for the fuse subssystem"
	help
	  (deprecated - needs conversion to driver model)
	  This allows reading, sensing, programming or overriding fuses
	  which control the behaviour of the device. The command uses the
	  fuse_...() API.

config UBOOT_CONFIG_CMD_GPIO
	bool "gpio"
	help
	  GPIO support.

config UBOOT_CONFIG_CMD_SSO
	bool "serial shift output"
	help
	  Support serial shift output command

config UBOOT_CONFIG_CMD_AQN
	bool "Aquantia firmware upload"
	help
	  Support Aquantia 10G PHY firmware upload via MDIO

config UBOOT_CONFIG_CMD_PWM
	bool "pwm"
	depends on UBOOT_CONFIG_DM_PWM
	help
	  Control PWM channels, this allows invert/config/enable/disable PWM channels.

config UBOOT_CONFIG_CMD_GPT
	bool "GPT (GUID Partition Table) command"
	select UBOOT_CONFIG_EFI_PARTITION
	select UBOOT_CONFIG_HAVE_BLOCK_DEVICE
	select UBOOT_CONFIG_PARTITION_UUIDS
	imply RANDOM_UUID
	help
	  Enable the 'gpt' command to ready and write GPT style partition
	  tables.

config UBOOT_CONFIG_RANDOM_UUID
	bool "GPT Random UUID generation"
	select UBOOT_CONFIG_LIB_UUID
	help
	  Enable the generation of partitions with random UUIDs if none
	  are provided.

config UBOOT_CONFIG_CMD_GPT_RENAME
	bool "GPT partition renaming commands"
	depends on UBOOT_CONFIG_CMD_GPT
	help
	  Enables the 'gpt' command to interchange names on two GPT
	  partitions via the 'gpt swap' command or to rename single
	  partitions via the 'rename' command.

config UBOOT_CONFIG_CMD_IDE
	bool "ide - Support for IDE drivers"
	select UBOOT_CONFIG_IDE
	help
	  Provides an 'ide' command which allows accessing the IDE drive,
	  reseting the IDE interface, printing the partition table and
	  geting device info. It also enables the 'diskboot' command which
	  permits booting from an IDE drive.

config UBOOT_CONFIG_CMD_IO
	bool "io - Support for performing I/O accesses"
	help
	  Provides an 'iod' command to display I/O space and an 'iow' command
	  to write values to the I/O space. This can be useful for manually
	  checking the state of devices during boot when debugging device
	  drivers, etc.

config UBOOT_CONFIG_CMD_IOTRACE
	bool "iotrace - Support for tracing I/O activity"
	help
	  Provides an 'iotrace' command which supports recording I/O reads and
	  writes in a trace buffer in memory . It also maintains a checksum
	  of the trace records (even if space is exhausted) so that the
	  sequence of I/O accesses can be verified.

	  When debugging drivers it is useful to see what I/O accesses were
	  done and in what order.

	  Even if the individual accesses are of little interest it can be
	  useful to verify that the access pattern is consistent each time
	  an operation is performed. In this case a checksum can be used to
	  characterise the operation of a driver. The checksum can be compared
	  across different runs of the operation to verify that the driver is
	  working properly.

	  In particular, when performing major refactoring of the driver, where
	  the access pattern should not change, the checksum provides assurance
	  that the refactoring work has not broken the driver.

	  This works by sneaking into the io.h heder for an architecture and
	  redirecting I/O accesses through iotrace's tracing mechanism.

	  For now no commands are provided to examine the trace buffer. The
	  format is fairly simple, so 'md' is a reasonable substitute.

	  Note: The checksum feature is only useful for I/O regions where the
	  contents do not change outside of software control. Where this is not
	  suitable you can fall back to manually comparing the addresses. It
	  might be useful to enhance tracing to only checksum the accesses and
	  not the data read/written.

config UBOOT_CONFIG_CMD_I2C
	bool "i2c"
	help
	  I2C support.

config UBOOT_CONFIG_CMD_W1
	depends on UBOOT_CONFIG_W1
	default y if UBOOT_CONFIG_W1
	bool "w1 - Support for Dallas 1-Wire protocol"
	help
	  Dallas 1-wire protocol support

config UBOOT_CONFIG_CMD_LOADB
	bool "loadb"
	default y
	help
	  Load a binary file over serial line.

config UBOOT_CONFIG_CMD_LOADS
	bool "loads"
	default y
	help
	  Load an S-Record file over serial line

config UBOOT_CONFIG_CMD_LSBLK
	depends on UBOOT_CONFIG_BLK
	bool "lsblk - list block drivers and devices"
	help
	  Print list of available block device drivers, and for each, the list
	  of known block devices.

config UBOOT_CONFIG_CMD_MBR
	bool "MBR (Master Boot Record) command"
	select UBOOT_CONFIG_DOS_PARTITION
	select UBOOT_CONFIG_HAVE_BLOCK_DEVICE
	help
	  Enable the 'mbr' command to ready and write MBR (Master Boot Record)
	  style partition tables.

config UBOOT_CONFIG_CMD_MISC
	bool "misc"
	depends on UBOOT_CONFIG_MISC
	help
	  Enable the command "misc" for accessing miscellaneous devices with
	  a MISC uclass driver. The command provides listing all MISC devices
	  as well as read and write functionalities via their drivers.

config UBOOT_CONFIG_CMD_MMC
	bool "mmc"
	depends on UBOOT_CONFIG_MMC
	help
	  MMC memory mapped support.

if UBOOT_CONFIG_CMD_MMC

config UBOOT_CONFIG_CMD_BKOPS_ENABLE
	bool "mmc bkops enable"
	depends on UBOOT_CONFIG_CMD_MMC
	help
	  Enable command for setting manual background operations handshake
	  on a eMMC device. The feature is optionally available on eMMC devices
	  conforming to standard >= 4.41.

config UBOOT_CONFIG_CMD_MMC_RPMB
	bool "Enable support for RPMB in the mmc command"
	depends on UBOOT_CONFIG_SUPPORT_EMMC_RPMB
	help
	  Enable the commands for reading, writing and programming the
	  key for the Replay Protection Memory Block partition in eMMC.

config UBOOT_CONFIG_CMD_MMC_SWRITE
	bool "mmc swrite"
	depends on UBOOT_CONFIG_MMC_WRITE
	select UBOOT_CONFIG_IMAGE_SPARSE
	help
	  Enable support for the "mmc swrite" command to write Android sparse
	  images to eMMC.

endif

config UBOOT_CONFIG_CMD_CLONE
	bool "clone"
	depends on UBOOT_CONFIG_BLK
	help
	  Enable storage cloning over block devices, useful for
	  initial flashing by external block device without network
	  or usb support.

config UBOOT_CONFIG_CMD_OPTEE_RPMB
	bool "Enable read/write support on RPMB via OPTEE"
	depends on UBOOT_CONFIG_SUPPORT_EMMC_RPMB && UBOOT_CONFIG_OPTEE
	help
	  Enable the commands for reading, writing persistent named values
	  in the Replay Protection Memory Block partition in eMMC by
	  using Persistent Objects in OPTEE

config UBOOT_CONFIG_CMD_MTD
	bool "mtd"
	depends on UBOOT_CONFIG_MTD
	select UBOOT_CONFIG_MTD_PARTITIONS
	help
	  MTD commands support.

config UBOOT_CONFIG_CMD_MUX
	bool "mux"
	depends on UBOOT_CONFIG_MULTIPLEXER
	help
	 List, select, and deselect mux controllers on the fly.

config UBOOT_CONFIG_CMD_NAND
	bool "nand"
	default y if UBOOT_CONFIG_NAND_SUNXI
	depends on UBOOT_CONFIG_MTD_RAW_NAND
	help
	  NAND support.

if UBOOT_CONFIG_CMD_NAND
config UBOOT_CONFIG_CMD_NAND_TRIMFFS
	bool "nand write.trimffs"
	default y if UBOOT_CONFIG_ARCH_SUNXI
	help
	  Allows one to skip empty pages when flashing something on a NAND.

config UBOOT_CONFIG_CMD_NAND_LOCK_UNLOCK
	bool "nand lock/unlock"
	help
	  NAND locking support.

config UBOOT_CONFIG_CMD_NAND_TORTURE
	bool "nand torture"
	help
	  NAND torture support.

endif # CMD_NAND

config UBOOT_CONFIG_CMD_NVME
	bool "nvme"
	depends on UBOOT_CONFIG_NVME
	default y if UBOOT_CONFIG_NVME
	help
	  NVM Express device support

config UBOOT_CONFIG_CMD_ONENAND
	bool "onenand - access to onenand device"
	depends on UBOOT_CONFIG_MTD
	help
	  OneNAND is a brand of NAND ('Not AND' gate) flash which provides
	  various useful features. This command allows reading, writing,
	  and erasing blocks. It allso provides a way to show and change
	  bad blocks, and test the device.

config UBOOT_CONFIG_CMD_OSD
	bool "osd"
	help
	  Enable the 'osd' command which allows to query information from and
	  write text data to a on-screen display (OSD) device; a virtual device
	  associated with a display capable of displaying a text overlay on the
	  display it's associated with..

config UBOOT_CONFIG_CMD_PART
	bool "part"
	select UBOOT_CONFIG_HAVE_BLOCK_DEVICE
	select UBOOT_CONFIG_PARTITION_UUIDS
	help
	  Read and display information about the partition table on
	  various media.

config UBOOT_CONFIG_CMD_PCI
	bool "pci - Access PCI devices"
	help
	  Provide access to PCI (Peripheral Interconnect Bus), a type of bus
	  used on some devices to allow the CPU to communicate with its
	  peripherals. Sub-commands allow bus enumeration, displaying and
	  changing configuration space and a few other features.

config UBOOT_CONFIG_CMD_PINMUX
	bool "pinmux - show pins muxing"
	depends on UBOOT_CONFIG_PINCTRL
	default y if UBOOT_CONFIG_PINCTRL
	help
	  Parse all available pin-controllers and show pins muxing. This
	  is useful for debug purpoer to check the pin muxing and to know if
	  a pin is configured as a GPIO or as an alternate function.

config UBOOT_CONFIG_CMD_POWEROFF
	bool "poweroff"
	help
	  Poweroff/Shutdown the system

config UBOOT_CONFIG_CMD_READ
	bool "read - Read binary data from a partition"
	help
	  Provides low-level access to the data in a partition.

config UBOOT_CONFIG_CMD_REMOTEPROC
	bool "remoteproc"
	depends on UBOOT_CONFIG_REMOTEPROC
	help
	  Support for Remote Processor control

config UBOOT_CONFIG_CMD_SATA
	bool "sata - Access SATA subsystem"
	select UBOOT_CONFIG_SATA
	help
	  SATA (Serial Advanced Technology Attachment) is a serial bus
	  standard for connecting to hard drives and other storage devices.
	  This command provides information about attached devices and allows
	  reading, writing and other operations.

	  SATA replaces PATA (originally just ATA), which stands for Parallel AT
	  Attachment, where AT refers to an IBM AT (Advanced Technology)
	  computer released in 1984.

config UBOOT_CONFIG_CMD_SAVES
	bool "saves - Save a file over serial in S-Record format"
	help
	  Provides a way to save a binary file using the Motorola S-Record
	  format over the serial line.

config UBOOT_CONFIG_CMD_SCSI
	bool "scsi - Access to SCSI devices"
	default y if UBOOT_CONFIG_SCSI
	help
	  This provides a 'scsi' command which provides access to SCSI (Small
	  Computer System Interface) devices. The command provides a way to
	  scan the bus, reset the bus, read and write data and get information
	  about devices.

config UBOOT_CONFIG_CMD_SDRAM
	bool "sdram - Print SDRAM configuration information"
	help
	  Provides information about attached SDRAM. This assumed that the
	  SDRAM has an EEPROM with information that can be read using the
	  I2C bus. This is only available on some boards.

config UBOOT_CONFIG_CMD_SF
	bool "sf"
	depends on UBOOT_CONFIG_DM_SPI_FLASH || UBOOT_CONFIG_SPI_FLASH
	default y if UBOOT_CONFIG_DM_SPI_FLASH
	help
	  SPI Flash support

config UBOOT_CONFIG_CMD_SF_TEST
	bool "sf test - Allow testing of SPI flash"
	depends on UBOOT_CONFIG_CMD_SF
	help
	  Provides a way to test that SPI flash is working correctly. The
	  test is destructive, in that an area of SPI flash must be provided
	  for the test to use. Performance information is also provided,
	  measuring the performance of reading, writing and erasing in
	  Mbps (Million Bits Per Second). This value should approximately
	  equal the SPI bus speed for a single-bit-wide SPI bus, assuming
	  everything is working properly.

config UBOOT_CONFIG_CMD_SPI
	bool "sspi - Command to access spi device"
	depends on UBOOT_CONFIG_SPI
	help
	  SPI utility command.

config UBOOT_CONFIG_DEFAULT_SPI_BUS
	int "default spi bus used by sspi command"
	depends on UBOOT_CONFIG_CMD_SPI
	default 0

config UBOOT_CONFIG_DEFAULT_SPI_MODE
	hex "default spi mode used by sspi command (see include/spi.h)"
	depends on UBOOT_CONFIG_CMD_SPI
	default 0

config UBOOT_CONFIG_CMD_TSI148
	bool "tsi148 - Command to access tsi148 device"
	help
	  This provides various sub-commands to initialise and configure the
	  Turndra tsi148 device. See the command help for full details.

config UBOOT_CONFIG_CMD_UFS
	bool "Enable UFS - Universal Flash Subsystem commands"
	depends on UBOOT_CONFIG_UFS
	help
	  "This provides commands to initialise and configure universal flash
	   subsystem devices"

config UBOOT_CONFIG_CMD_UNIVERSE
	bool "universe - Command to set up the Turndra Universe controller"
	help
	  This allows setting up the VMEbus provided by this controller.
	  See the command help for full details.

config UBOOT_CONFIG_CMD_USB
	bool "usb"
	depends on UBOOT_CONFIG_USB_HOST
	select UBOOT_CONFIG_HAVE_BLOCK_DEVICE
	help
	  USB support.

config UBOOT_CONFIG_CMD_USB_SDP
	bool "sdp"
	select UBOOT_CONFIG_USB_FUNCTION_SDP
	help
	  Enables the command "sdp" which is used to have U-Boot emulating the
	  Serial Download Protocol (SDP) via USB.

config UBOOT_CONFIG_CMD_ROCKUSB
	bool "rockusb"
	depends on UBOOT_CONFIG_USB_FUNCTION_ROCKUSB
	help
	  Rockusb protocol is widely used by Rockchip SoC based devices. It can
	  read/write info, image to/from devices. This enable rockusb command
	  support to communication with rockusb device. for more detail about
	  this command, please read doc/README.rockusb.

config UBOOT_CONFIG_CMD_USB_MASS_STORAGE
	bool "UMS usb mass storage"
	depends on UBOOT_CONFIG_USB_GADGET_DOWNLOAD
	select UBOOT_CONFIG_USB_FUNCTION_MASS_STORAGE
	depends on UBOOT_CONFIG_BLK && UBOOT_CONFIG_USB_GADGET
	help
	  Enables the command "ums" and the USB mass storage support to the
	  export a block device: U-Boot, the USB device, acts as a simple
	  external hard drive plugged on the host USB port.

config UBOOT_CONFIG_CMD_PVBLOCK
	bool "Xen para-virtualized block device"
	depends on UBOOT_CONFIG_XEN
	select UBOOT_CONFIG_PVBLOCK
	help
	  Xen para-virtualized block device support

config UBOOT_CONFIG_CMD_VIRTIO
	bool "virtio"
	depends on UBOOT_CONFIG_VIRTIO
	depends on UBOOT_CONFIG_HAVE_BLOCK_DEVICE
	default y if UBOOT_CONFIG_VIRTIO
	help
	  VirtIO block device support

config UBOOT_CONFIG_CMD_WDT
	bool "wdt"
	depends on UBOOT_CONFIG_WDT
	help
	  This provides commands to control the watchdog timer devices.

config UBOOT_CONFIG_CMD_AXI
	bool "axi"
	depends on UBOOT_CONFIG_AXI
	help
	  Enable the command "axi" for accessing AXI (Advanced eXtensible
	  Interface) busses, a on-chip interconnect specification for managing
	  functional blocks in SoC designs, which is also often used in designs
	  involving FPGAs (e.g.  communication with IP cores in Xilinx FPGAs).
endmenu


menu "Shell scripting commands"

config UBOOT_CONFIG_CMD_ECHO
	bool "echo"
	default y
	help
	  Echo args to console

config UBOOT_CONFIG_CMD_ITEST
	bool "itest"
	default y
	help
	  Return true/false on integer compare.

config UBOOT_CONFIG_CMD_SOURCE
	bool "source"
	default y
	help
	  Run script from memory

config UBOOT_CONFIG_CMD_SETEXPR
	bool "setexpr"
	default y
	help
	  Evaluate boolean and math expressions and store the result in an env
	    variable.
	  Also supports loading the value at a memory location into a variable.
	  If CONFIG_REGEX is enabled, setexpr also supports a gsub function.

config UBOOT_CONFIG_CMD_SETEXPR_FMT
	bool "setexpr_fmt"
	depends on UBOOT_CONFIG_CMD_SETEXPR
	help
	  Evaluate format string expression and store result in an environment
	    variable.

endmenu

menu "Android support commands"

config UBOOT_CONFIG_CMD_AB_SELECT
	bool "ab_select"
	depends on UBOOT_CONFIG_ANDROID_AB
	help
	  On Android devices with more than one boot slot (multiple copies of
	  the kernel and system images) this provides a command to select which
	  slot should be used to boot from and register the boot attempt. This
	  is used by the new A/B update model where one slot is updated in the
	  background while running from the other slot.

endmenu

if UBOOT_CONFIG_NET

menuconfig UBOOT_CONFIG_CMD_NET
	bool "Network commands"
	default y
	imply NETDEVICES

if UBOOT_CONFIG_CMD_NET

config UBOOT_CONFIG_CMD_BOOTP
	bool "bootp"
	default y
	help
	  bootp - boot image via network using BOOTP/TFTP protocol

config UBOOT_CONFIG_CMD_DHCP
	bool "dhcp"
	depends on UBOOT_CONFIG_CMD_BOOTP
	help
	  Boot image via network using DHCP/TFTP protocol

config UBOOT_CONFIG_BOOTP_BOOTPATH
	bool "Request & store 'rootpath' from BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP
	help
	  Even though the config is called BOOTP_BOOTPATH, it stores the
	  path in the variable 'rootpath'.

config UBOOT_CONFIG_BOOTP_DNS
	bool "Request & store 'dnsip' from BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP
	help
	  The primary DNS server is stored as 'dnsip'. If two servers are
	  returned, you must set BOOTP_DNS2 to store that second server IP
	  also.

config UBOOT_CONFIG_BOOTP_DNS2
	bool "Store 'dnsip2' from BOOTP/DHCP server"
	depends on UBOOT_CONFIG_BOOTP_DNS
	help
	  If a DHCP client requests the DNS server IP from a DHCP server,
	  it is possible that more than one DNS serverip is offered to the
	  client. If CONFIG_BOOTP_DNS2 is enabled, the secondary DNS
	  server IP will be stored in the additional environment
	  variable "dnsip2". The first DNS serverip is always
	  stored in the variable "dnsip", when BOOTP_DNS is defined.

config UBOOT_CONFIG_BOOTP_GATEWAY
	bool "Request & store 'gatewayip' from BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP

config UBOOT_CONFIG_BOOTP_HOSTNAME
	bool "Request & store 'hostname' from BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP
	help
	  The name may or may not be qualified with the local domain name.

config UBOOT_CONFIG_BOOTP_PREFER_SERVERIP
	bool "serverip variable takes precedent over DHCP server IP."
	depends on UBOOT_CONFIG_CMD_BOOTP
	help
	  By default a BOOTP/DHCP reply will overwrite the 'serverip' variable.

	  With this option enabled, the 'serverip' variable in the environment
	  takes precedence over DHCP server IP and will only be set by the DHCP
	  server if not already set in the environment.

config UBOOT_CONFIG_BOOTP_SUBNETMASK
	bool "Request & store 'netmask' from BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP

config UBOOT_CONFIG_BOOTP_NTPSERVER
	bool "Request & store 'ntpserverip' from BOOTP/DHCP server"
	depends on UBOOT_CONFIG_CMD_BOOTP

config UBOOT_CONFIG_CMD_PCAP
	bool "pcap capture"
	help
	  Selecting this will allow capturing all Ethernet packets and store
	  them in physical memory in a PCAP formated file,
	  later to be analyzed by PCAP reader application (IE. WireShark).

config UBOOT_CONFIG_BOOTP_PXE
	bool "Send PXE client arch to BOOTP/DHCP server"
	default y
	depends on UBOOT_CONFIG_CMD_BOOTP && UBOOT_CONFIG_CMD_PXE
	help
	  Supported for ARM, ARM64, and x86 for now.

config UBOOT_CONFIG_BOOTP_PXE_CLIENTARCH
	hex
	depends on UBOOT_CONFIG_BOOTP_PXE
	default 0x16 if UBOOT_CONFIG_ARM64
	default 0x15 if UBOOT_CONFIG_ARM
	default 0 if UBOOT_CONFIG_X86

config UBOOT_CONFIG_BOOTP_VCI_STRING
	string
	depends on UBOOT_CONFIG_CMD_BOOTP
	default "U-Boot.armv7" if UBOOT_CONFIG_CPU_V7A || UBOOT_CONFIG_CPU_V7M || UBOOT_CONFIG_CPU_V7R
	default "U-Boot.armv8" if UBOOT_CONFIG_ARM64
	default "U-Boot.arm" if UBOOT_CONFIG_ARM
	default "U-Boot"

config UBOOT_CONFIG_CMD_TFTPBOOT
	bool "tftpboot"
	default y
	help
	  tftpboot - boot image via network using TFTP protocol

config UBOOT_CONFIG_CMD_TFTPPUT
	bool "tftp put"
	depends on UBOOT_CONFIG_CMD_TFTPBOOT
	help
	  TFTP put command, for uploading files to a server

config UBOOT_CONFIG_CMD_TFTPSRV
	bool "tftpsrv"
	depends on UBOOT_CONFIG_CMD_TFTPBOOT
	help
	  Act as a TFTP server and boot the first received file

config UBOOT_CONFIG_NET_TFTP_VARS
	bool "Control TFTP timeout and count through environment"
	depends on UBOOT_CONFIG_CMD_TFTPBOOT
	default y
	help
	  If set, allows controlling the TFTP timeout through the
	  environment variable tftptimeout, and the TFTP maximum
	  timeout count through the variable tftptimeoutcountmax.
	  If unset, timeout and maximum are hard-defined as 1 second
	  and 10 timouts per TFTP transfer.

config UBOOT_CONFIG_CMD_RARP
	bool "rarpboot"
	help
	  Boot image via network using RARP/TFTP protocol

config UBOOT_CONFIG_CMD_NFS
	bool "nfs"
	default y
	help
	  Boot image via network using NFS protocol.

config UBOOT_CONFIG_CMD_MII
	bool "mii"
	imply CMD_MDIO
	help
	  If set, allows 802.3(clause 22) MII Management functions interface access
	  The management interface specified in Clause 22 provides
	  a simple, two signal, serial interface to connect a
	  Station Management entity and a managed PHY for providing access
	  to management parameters and services.
	  The interface is referred to as the MII management interface.

config UBOOT_CONFIG_CMD_MDIO
	bool "mdio"
	depends on UBOOT_CONFIG_PHYLIB
	help
	  If set, allows Enable 802.3(clause 45) MDIO interface registers access
	  The MDIO interface is orthogonal to the MII interface and extends
	  it by adding access to more registers through indirect addressing.

config UBOOT_CONFIG_CMD_PING
	bool "ping"
	help
	  Send ICMP ECHO_REQUEST to network host

config UBOOT_CONFIG_CMD_CDP
	bool "cdp"
	help
	  Perform CDP network configuration

config UBOOT_CONFIG_CMD_SNTP
	bool "sntp"
	select UBOOT_CONFIG_PROT_UDP
	help
	  Synchronize RTC via network

config UBOOT_CONFIG_CMD_DNS
	bool "dns"
	help
	  Lookup the IP of a hostname

config UBOOT_CONFIG_CMD_LINK_LOCAL
	bool "linklocal"
	select UBOOT_CONFIG_LIB_RAND
	help
	  Acquire a network IP address using the link-local protocol

endif

config UBOOT_CONFIG_CMD_ETHSW
	bool "ethsw"
	help
	  Allow control of L2 Ethernet switch commands. These are supported
	  by the vsc9953 Ethernet driver at present. Sub-commands allow
	  operations such as enabling / disabling a port and
	  viewing/maintaining the filtering database (FDB)

config UBOOT_CONFIG_CMD_PXE
	bool "pxe"
	select UBOOT_CONFIG_MENU
	help
	  Boot image via network using PXE protocol

config UBOOT_CONFIG_CMD_WOL
	bool "wol"
	help
	  Wait for wake-on-lan Magic Packet

endif

menu "Misc commands"

config UBOOT_CONFIG_CMD_BMP
	bool "Enable 'bmp' command"
	depends on UBOOT_CONFIG_LCD || UBOOT_CONFIG_DM_VIDEO || UBOOT_CONFIG_VIDEO
	help
	  This provides a way to obtain information about a BMP-format image
	  and to display it. BMP (which presumably stands for BitMaP) is a
	  file format defined by Microsoft which supports images of various
	  depths, formats and compression methods. Headers on the file
	  determine the formats used. This command can be used by first loading
	  the image into RAM, then using this command to look at it or display
	  it.

config UBOOT_CONFIG_CMD_BOOTCOUNT
	bool "bootcount"
	depends on UBOOT_CONFIG_BOOTCOUNT_LIMIT
	help
	  Enable the bootcount command, which allows interrogation and
	  reset of the bootcounter.

config UBOOT_CONFIG_CMD_BSP
	bool "Enable board-specific commands"
	help
	  (deprecated: instead, please define a Kconfig option for each command)

	  Some boards have board-specific commands which are only enabled
	  during developemnt and need to be turned off for production. This
	  option provides a way to control this. The commands that are enabled
	  vary depending on the board.

config UBOOT_CONFIG_CMD_BLOCK_CACHE
	bool "blkcache - control and stats for block cache"
	depends on UBOOT_CONFIG_BLOCK_CACHE
	default y if UBOOT_CONFIG_BLOCK_CACHE
	help
	  Enable the blkcache command, which can be used to control the
	  operation of the cache functions.
	  This is most useful when fine-tuning the operation of the cache
	  during development, but also allows the cache to be disabled when
	  it might hurt performance (e.g. when using the ums command).

config UBOOT_CONFIG_CMD_BUTTON
	bool "button"
	depends on UBOOT_CONFIG_BUTTON
	default y if UBOOT_CONFIG_BUTTON
	help
	  Enable the 'button' command which allows to get the status of
	  buttons supported by the board. The buttonss can be listed with
	  'button list' and state can be known with 'button <label>'.
	  Any button drivers can be controlled with this command, e.g.
	  button_gpio.

config UBOOT_CONFIG_CMD_CACHE
	bool "icache or dcache"
	help
	  Enable the "icache" and "dcache" commands

config UBOOT_CONFIG_CMD_CONITRACE
	bool "conitrace - trace console input codes"
	help
	  Enable the 'conitrace' command which displays the codes received
	  from the console input as hexadecimal numbers.

config UBOOT_CONFIG_CMD_CLS
	bool "Enable clear screen command 'cls'"
	depends on UBOOT_CONFIG_CFB_CONSOLE || UBOOT_CONFIG_DM_VIDEO || UBOOT_CONFIG_LCD || UBOOT_CONFIG_VIDEO
	default y if UBOOT_CONFIG_LCD
	help
	  Enable the 'cls' command which clears the screen contents
	  on video frame buffer.

config UBOOT_CONFIG_CMD_EFIDEBUG
	bool "efidebug - display/configure UEFI environment"
	depends on UBOOT_CONFIG_EFI_LOADER
	select UBOOT_CONFIG_EFI_DEVICE_PATH_TO_TEXT
	help
	  Enable the 'efidebug' command which provides a subset of UEFI
	  shell utility with simplified functionality. It will be useful
	  particularly for managing boot parameters as  well as examining
	  various EFI status for debugging.

config UBOOT_CONFIG_CMD_EXCEPTION
	bool "exception - raise exception"
	depends on UBOOT_CONFIG_ARM || UBOOT_CONFIG_RISCV || UBOOT_CONFIG_SANDBOX || UBOOT_CONFIG_X86
	help
	  Enable the 'exception' command which allows to raise an exception.

config UBOOT_CONFIG_CMD_LED
	bool "led"
	depends on UBOOT_CONFIG_LED
	default y if UBOOT_CONFIG_LED
	help
	  Enable the 'led' command which allows for control of LEDs supported
	  by the board. The LEDs can be listed with 'led list' and controlled
	  with led on/off/togle/blink. Any LED drivers can be controlled with
	  this command, e.g. led_gpio.

config UBOOT_CONFIG_CMD_DATE
	bool "date"
	default y if UBOOT_CONFIG_DM_RTC
	select UBOOT_CONFIG_LIB_DATE
	help
	  Enable the 'date' command for getting/setting the time/date in RTC
	  devices.

config UBOOT_CONFIG_CMD_RTC
	bool "rtc"
	depends on UBOOT_CONFIG_DM_RTC
	help
	  Enable the 'rtc' command for low-level access to RTC devices.

config UBOOT_CONFIG_CMD_TIME
	bool "time"
	help
	  Run commands and summarize execution time.

config UBOOT_CONFIG_CMD_GETTIME
	bool "gettime - read elapsed time"
	help
	  Enable the 'gettime' command which reads the elapsed time since
	  U-Boot started running. This shows the time in seconds and
	  milliseconds. See also the 'bootstage' command which provides more
	  flexibility for boot timing.

config UBOOT_CONFIG_CMD_RNG
	bool "rng command"
	depends on UBOOT_CONFIG_DM_RNG
	select UBOOT_CONFIG_HEXDUMP
	help
	  Print bytes from the hardware random number generator.

config UBOOT_CONFIG_CMD_KASLRSEED
	bool "kaslrseed"
	depends on UBOOT_CONFIG_DM_RNG
	help
	  Set the kaslr-seed in the chosen node with entropy provided by a
	  hardware random number generator.

config UBOOT_CONFIG_CMD_SLEEP
	bool "sleep"
	default y
	help
	  Delay execution for some time

config UBOOT_CONFIG_MP
	bool "support for multiprocessor"
	help
	  This provides an option to brinup
	  different processors in multiprocessor
	  cases.

config UBOOT_CONFIG_CMD_TIMER
	bool "timer"
	help
	  Access the system timer.

config UBOOT_CONFIG_CMD_SOUND
	bool "sound"
	depends on UBOOT_CONFIG_SOUND
	help
	  This provides basic access to the U-Boot's sound support. The main
	  feature is to play a beep.

	     sound init   - set up sound system
	     sound play   - play a sound

config UBOOT_CONFIG_CMD_SYSBOOT
	bool "sysboot"
	select UBOOT_CONFIG_MENU
	help
	  Boot image via local extlinux.conf file

config UBOOT_CONFIG_CMD_QFW
	bool "qfw"
	select UBOOT_CONFIG_QFW
	help
	  This provides access to the QEMU firmware interface.  The main
	  feature is to allow easy loading of files passed to qemu-system
	  via -kernel / -initrd

config UBOOT_CONFIG_CMD_PSTORE
	bool "pstore"
	help
	  This provides access to Linux PStore with Rammoops backend. The main
	  feature is to allow to display or save PStore records.

	  See doc/pstore.rst for more information.

if UBOOT_CONFIG_CMD_PSTORE

config UBOOT_CONFIG_CMD_PSTORE_MEM_ADDR
	hex "Memory Address"
	depends on UBOOT_CONFIG_CMD_PSTORE
	help
	  Base addr used for PStore ramoops memory, should be identical to
	  ramoops.mem_address parameter used by kernel

config UBOOT_CONFIG_CMD_PSTORE_MEM_SIZE
	hex "Memory size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0x10000"
	help
	  Size of PStore ramoops memory, should be identical to ramoops.mem_size
	  parameter used by kernel, a power of 2 and larger than the sum of the
	  record sizes

config UBOOT_CONFIG_CMD_PSTORE_RECORD_SIZE
	hex "Dump record size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0x1000"
	help
	  Size of each dump done on oops/panic, should be identical to
	  ramoops.record_size parameter used by kernel and a power of 2
	  Must be non-zero

config UBOOT_CONFIG_CMD_PSTORE_CONSOLE_SIZE
	hex "Kernel console log size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0x1000"
	help
	  Size of kernel console log, should be identical to
	  ramoops.console_size parameter used by kernel and a power of 2
	  Must be non-zero

config UBOOT_CONFIG_CMD_PSTORE_FTRACE_SIZE
	hex "FTrace log size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0x1000"
	help
	  Size of ftrace log, should be identical to ramoops.ftrace_size
	  parameter used by kernel and a power of 2

config UBOOT_CONFIG_CMD_PSTORE_PMSG_SIZE
	hex "User space message log size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0x1000"
	help
	  Size of user space message log, should be identical to
	  ramoops.pmsg_size parameter used by kernel and a power of 2

config UBOOT_CONFIG_CMD_PSTORE_ECC_SIZE
	int "ECC size"
	depends on UBOOT_CONFIG_CMD_PSTORE
	default "0"
	help
	if non-zero, the option enables ECC support and specifies ECC buffer
	size in bytes (1 is a special value, means 16 bytes ECC), should be
	identical to ramoops.ramoops_ecc parameter used by kernel

endif

source "mvebu/Kconfig"

config UBOOT_CONFIG_CMD_TERMINAL
	bool "terminal - provides a way to attach a serial terminal"
	help
	  Provides a 'cu'-like serial terminal command. This can be used to
	  access other serial ports from the system console. The terminal
	  is very simple with no special processing of characters. As with
	  cu, you can press ~. (tilde followed by period) to exit.

config UBOOT_CONFIG_CMD_UUID
	bool "uuid, guid - generation of unique IDs"
	select UBOOT_CONFIG_LIB_UUID
	help
	  This enables two commands:

	     uuid - generate random Universally Unique Identifier
	     guid - generate Globally Unique Identifier based on random UUID

	  The two commands are very similar except for the endianness of the
	  output.

endmenu

source "ti/Kconfig"

config UBOOT_CONFIG_CMD_BOOTSTAGE
	bool "Enable the 'bootstage' command"
	depends on UBOOT_CONFIG_BOOTSTAGE
	help
	  Add a 'bootstage' command which supports printing a report
	  and un/stashing of bootstage data.

menu "Power commands"
config UBOOT_CONFIG_CMD_PMIC
	bool "Enable Driver Model PMIC command"
	depends on UBOOT_CONFIG_DM_PMIC
	help
	  This is the pmic command, based on a driver model pmic's API.
	  Command features are unchanged:
	  - list               - list pmic devices
	  - pmic dev <id>      - show or [set] operating pmic device (NEW)
	  - pmic dump          - dump registers
	  - pmic read address  - read byte of register at address
	  - pmic write address - write byte to register at address
	  The only one change for this command is 'dev' subcommand.

config UBOOT_CONFIG_CMD_REGULATOR
	bool "Enable Driver Model REGULATOR command"
	depends on UBOOT_CONFIG_DM_REGULATOR
	help
	  This command is based on driver model regulator's API.
	  User interface features:
	  - list               - list regulator devices
	  - regulator dev <id> - show or [set] operating regulator device
	  - regulator info     - print constraints info
	  - regulator status   - print operating status
	  - regulator value <val] <-f> - print/[set] voltage value [uV]
	  - regulator current <val>    - print/[set] current value [uA]
	  - regulator mode <id>        - print/[set] operating mode id
	  - regulator enable           - enable the regulator output
	  - regulator disable          - disable the regulator output

	  The '-f' (force) option can be used for set the value which exceeds
	  the limits, which are found in device-tree and are kept in regulator's
	  uclass plat structure.

endmenu

menu "Security commands"
config UBOOT_CONFIG_CMD_AES
	bool "Enable the 'aes' command"
	select UBOOT_CONFIG_AES
	help
	  This provides a means to encrypt and decrypt data using the AES
	  (Advanced Encryption Standard). This algorithm uses a symetric key
	  and is widely used as a streaming cipher. Different key lengths are
	  supported by the algorithm but this command only supports 128 bits
	  at present.

config UBOOT_CONFIG_CMD_BLOB
	bool "Enable the 'blob' command"
	depends on !UBOOT_CONFIG_MX6ULL && !UBOOT_CONFIG_MX6SLL && !UBOOT_CONFIG_MX6SL
	select UBOOT_CONFIG_IMX_HAB if ARCH_MX6 || UBOOT_CONFIG_ARCH_MX7 || UBOOT_CONFIG_ARCH_MX7ULP || UBOOT_CONFIG_ARCH_IMX8M
	help
	  This is used with the Freescale secure boot mechanism.

	  Freescale's SEC block has built-in Blob Protocol which provides
	  a method for protecting user-defined data across system power
	  cycles. SEC block protects data in a data structure called a Blob,
	  which provides both confidentiality and integrity protection.

	  Encapsulating data as a blob
	  Each time that the Blob Protocol is used to protect data, a
	  different randomly generated key is used to encrypt the data.
	  This random key is itself encrypted using a key which is derived
	  from SoC's non-volatile secret key and a 16 bit Key identifier.
	  The resulting encrypted key along with encrypted data is called a
	  blob. The non-volatile secure key is available for use only during
	  secure boot.

	  During decapsulation, the reverse process is performed to get back
	  the original data.

	  Sub-commands:
	    blob enc - encapsulating data as a cryptgraphic blob
	    blob dec - decapsulating cryptgraphic blob to get the data

	  Syntax:

	  blob enc src dst len km

	  Encapsulate and create blob of data $len bytes long
	  at address $src and store the result at address $dst.
	  $km is the 16 byte key modifier is also required for
	  generation/use as key for cryptographic operation. Key
	  modifier should be 16 byte long.

	  blob dec src dst len km

	  Decapsulate the  blob of data at address $src and
	  store result of $len byte at addr $dst.
	  $km is the 16 byte key modifier is also required for
	  generation/use as key for cryptographic operation. Key
	  modifier should be 16 byte long.

config UBOOT_CONFIG_CMD_HASH
	bool "Support 'hash' command"
	select UBOOT_CONFIG_HASH
	help
	  This provides a way to hash data in memory using various supported
	  algorithms (such as SHA1, MD5, CRC32). The computed digest can be
	  saved to memory or to an environment variable. It is also possible
	  to verify a hash against data in memory.

config UBOOT_CONFIG_CMD_HVC
	bool "Support the 'hvc' command"
	depends on UBOOT_CONFIG_ARM_SMCCC
	help
	  Allows issuing Hypervisor Calls (HVCs). Mostly useful for
	  development and testing.

config UBOOT_CONFIG_CMD_SMC
	bool "Support the 'smc' command"
	depends on UBOOT_CONFIG_ARM_SMCCC
	help
	  Allows issuing Secure Monitor Calls (SMCs). Mostly useful for
	  development and testing.

config UBOOT_CONFIG_HASH_VERIFY
	bool "hash -v"
	depends on UBOOT_CONFIG_CMD_HASH
	help
	  Add -v option to verify data against a hash.

config UBOOT_CONFIG_CMD_SCP03
	bool "scp03 - SCP03 enable and rotate/provision operations"
	depends on UBOOT_CONFIG_SCP03
	help
	  This command provides access to a Trusted Application
	  running in a TEE to request Secure Channel Protocol 03
	  (SCP03) enablement and/or rotation of its SCP03 keys.

config UBOOT_CONFIG_CMD_TPM_V1
	bool

config UBOOT_CONFIG_CMD_TPM_V2
	bool

config UBOOT_CONFIG_CMD_TPM
	bool "Enable the 'tpm' command"
	depends on UBOOT_CONFIG_TPM_V1 || UBOOT_CONFIG_TPM_V2
	select UBOOT_CONFIG_CMD_TPM_V1 if TPM_V1
	select UBOOT_CONFIG_CMD_TPM_V2 if TPM_V2
	help
	  This provides a means to talk to a TPM from the command line. A wide
	  range of commands if provided - see 'tpm help' for details. The
	  command requires a suitable TPM on your board and the correct driver
	  must be enabled.

if UBOOT_CONFIG_CMD_TPM

config UBOOT_CONFIG_CMD_TPM_TEST
	bool "Enable the 'tpm test' command"
	depends on UBOOT_CONFIG_TPM_V1
	help
	  This provides a a series of tests to confirm that the TPMv1.x is
	  working correctly. The tests cover initialisation, non-volatile RAM,
	  extend, global lock and checking that timing is within expectations.
	  The tests pass correctly on Infineon TPMs but may need to be adjusted
	  for other devices.

endif

config UBOOT_CONFIG_CMD_AUTH
	bool "LGM image authentication command"
	default y if UBOOT_CONFIG_CHD_SECURE_BOOT
	help
	  User application auth & auth_img & auth_initrd

config UBOOT_CONFIG_CMD_ICC
	bool "LGM inter chip communication"
	default y if UBOOT_CONFIG_CHD_SECURE_BOOT
	help
	  User application to send message to TEP

config UBOOT_CONFIG_CMD_IA_SWITCH
	bool "switch from IA_BOOT to IA_VMM mode"
	default n
	depends on ( UBOOT_CONFIG_DRIVER_LIGHTNING )

config UBOOT_CONFIG_CMD_WATCHDOG
	bool "watchdog timer application"
	default n
	help
	  User application to control the watchdog timer

endmenu

menu "Firmware commands"
config UBOOT_CONFIG_CMD_CROS_EC
	bool "Enable crosec command"
	depends on UBOOT_CONFIG_CROS_EC
	default y
	help
	  Enable command-line access to the Chrome OS EC (Embedded
	  Controller). This provides the 'crosec' command which has
	  a number of sub-commands for performing EC tasks such as
	  updating its flash, accessing a small saved context area
	  and talking to the I2C bus behind the EC (if there is one).
endmenu

menu "Filesystem commands"
config UBOOT_CONFIG_CMD_BTRFS
	bool "Enable the 'btrsubvol' command"
	select UBOOT_CONFIG_FS_BTRFS
	help
	  This enables the 'btrsubvol' command to list subvolumes
	  of a BTRFS filesystem. There are no special commands for
	  listing BTRFS directories or loading BTRFS files - this
	  can be done by the generic 'fs' commands (see CMD_FS_GENERIC)
	  when BTRFS is enabled (see FS_BTRFS).

config UBOOT_CONFIG_CMD_CBFS
	bool "Enable the 'cbfs' command"
	depends on UBOOT_CONFIG_FS_CBFS
	help
	  Define this to enable support for reading from a Coreboot
	  filesystem. This is a ROM-based filesystem used for accessing files
	  on systems that use coreboot as the first boot-loader and then load
	  U-Boot to actually boot the Operating System. Available commands are
	  cbfsinit, cbfsinfo, cbfsls and cbfsload.

config UBOOT_CONFIG_CMD_CRAMFS
	bool "Enable the 'cramfs' command"
	depends on UBOOT_CONFIG_FS_CRAMFS
	help
	  This provides commands for dealing with CRAMFS (Compressed ROM
	  filesystem). CRAMFS is useful when space is tight since files are
	  compressed. Two commands are provided:

	     cramfsls   - lists files in a cramfs image
	     cramfsload - loads a file from a cramfs image

config UBOOT_CONFIG_CMD_EXT2
	bool "ext2 command support"
	select UBOOT_CONFIG_FS_EXT4
	help
	  Enables EXT2 FS command

config UBOOT_CONFIG_CMD_EXT4
	bool "ext4 command support"
	select UBOOT_CONFIG_FS_EXT4
	help
	  Enables EXT4 FS command

config UBOOT_CONFIG_CMD_EXT4_WRITE
	depends on UBOOT_CONFIG_CMD_EXT4
	bool "ext4 write command support"
	select UBOOT_CONFIG_EXT4_WRITE
	help
	  Enables EXT4 FS write command

config UBOOT_CONFIG_CMD_FAT
	bool "FAT command support"
	select UBOOT_CONFIG_FS_FAT
	help
	  Support for the FAT fs

config UBOOT_CONFIG_CMD_SQUASHFS
	bool "SquashFS command support"
	select UBOOT_CONFIG_FS_SQUASHFS
	help
	  Enables SquashFS filesystem commands (e.g. load, ls).

config UBOOT_CONFIG_CMD_FS_GENERIC
	bool "filesystem commands"
	help
	  Enables filesystem commands (e.g. load, ls) that work for multiple
	  fs types.

config UBOOT_CONFIG_CMD_FS_UUID
	bool "fsuuid command"
	help
	  Enables fsuuid command for filesystem UUID.

config UBOOT_CONFIG_CMD_JFFS2
	bool "jffs2 command"
	select UBOOT_CONFIG_FS_JFFS2
	help
	  Enables commands to support the JFFS2 (Journalling Flash File System
	  version 2) filesystem. This enables fsload, ls and fsinfo which
	  provide the ability to load files, list directories and obtain
	  filesystem information.

config UBOOT_CONFIG_CMD_MTDPARTS
	bool "MTD partition support"
	depends on UBOOT_CONFIG_MTD
	help
	  MTD partitioning tool support.
	  It is strongly encouraged to avoid using this command
	  anymore along with 'sf', 'nand', 'onenand'. One can still
	  declare the partitions in the mtdparts environment variable
	  but better use the MTD stack and the 'mtd' command instead.

config UBOOT_CONFIG_CMD_MTDPARTS_SPREAD
	bool "Padd partition size to take account of bad blocks"
	depends on UBOOT_CONFIG_CMD_MTDPARTS
	help
	  This enables the 'spread' sub-command of the mtdparts command.
	  This command will modify the existing mtdparts variable by increasing
	  the size of the partitions such that 1) each partition's net size is
	  at least as large as the size specified in the mtdparts variable and
	  2) each partition starts on a good block.

config UBOOT_CONFIG_CMD_MTDPARTS_SHOW_NET_SIZES
	bool "Show net size (w/o bad blocks) of partitions"
	depends on UBOOT_CONFIG_CMD_MTDPARTS
	help
	  Adds two columns to the printed partition table showing the
	  effective usable size of a partition, if bad blocks are taken
	  into account.

config UBOOT_CONFIG_MTDIDS_DEFAULT
	string "Default MTD IDs"
	depends on UBOOT_CONFIG_MTD || UBOOT_CONFIG_SPI_FLASH
	help
	  Defines a default MTD IDs list for use with MTD partitions in the
	  Linux MTD command line partitions format.

config UBOOT_CONFIG_MTDPARTS_DEFAULT
	string "Default MTD partition scheme"
	depends on UBOOT_CONFIG_MTD || UBOOT_CONFIG_SPI_FLASH
	help
	  Defines a default MTD partitioning scheme in the Linux MTD command
	  line partitions format

config UBOOT_CONFIG_CMD_REISER
	bool "reiser - Access to reiserfs filesystems"
	help
	  This provides two commands which operate on a resierfs filesystem,
	  commonly used some years ago:

	    reiserls - list files
	    reiserload - load a file

config UBOOT_CONFIG_CMD_YAFFS2
	bool "yaffs2 - Access of YAFFS2 filesystem"
	depends on UBOOT_CONFIG_YAFFS2
	default y
	help
	  This provides commands for accessing a YAFFS2 filesystem. Yet
	  Another Flash Filesystem 2 is a filesystem designed specifically
	  for NAND flash. It incorporates bad-block management and ensures
	  that device writes are sequential regardless of filesystem
	  activity.

config UBOOT_CONFIG_CMD_ZFS
	bool "zfs - Access of ZFS filesystem"
	help
	  This provides commands to accessing a ZFS filesystem, commonly used
	  on Solaris systems. Two sub-commands are provided:

	    zfsls - list files in a directory
	    zfsload - load a file

	  See doc/README.zfs for more details.

endmenu

menu "Debug commands"

config UBOOT_CONFIG_CMD_BEDBUG
	bool "bedbug"
	help
	  The bedbug (emBEDded deBUGger) command provides debugging features
	  for some PowerPC processors. For details please see the
	  documentation in doc/README.bedbug.

config UBOOT_CONFIG_CMD_CBSYSINFO
	bool "cbsysinfo"
	depends on UBOOT_CONFIG_X86
	default y if UBOOT_CONFIG_SYS_COREBOOT
	help
	  This provides information about the coreboot sysinfo table stored in
	  memory by coreboot before jumping to U-Boot. It can be useful for
	  debugging the beaaviour of coreboot or U-Boot.

config UBOOT_CONFIG_CMD_DIAG
	bool "diag - Board diagnostics"
	help
	  This command provides access to board diagnostic tests. These are
	  called Power-on Self Tests (POST). The command allows listing of
	  available tests and running either all the tests, or specific tests
	  identified by name.

config UBOOT_CONFIG_CMD_IRQ
	bool "irq - Show information about interrupts"
	depends on !UBOOT_CONFIG_ARM && !UBOOT_CONFIG_MIPS && !UBOOT_CONFIG_RISCV && !UBOOT_CONFIG_SH
	help
	  This enables two commands:

	     interrupts - enable or disable interrupts
	     irqinfo - print device-specific interrupt information

config UBOOT_CONFIG_CMD_KGDB
	bool "kgdb - Allow debugging of U-Boot with gdb"
	depends on UBOOT_CONFIG_PPC
	help
	  This enables a 'kgdb' command which allows gdb to connect to U-Boot
	  over a serial link for debugging purposes. This allows
	  single-stepping, inspecting variables, etc. This is supported only
	  on PowerPC at present.

config UBOOT_CONFIG_CMD_LOG
	bool "log - Generation, control and access to logging"
	select UBOOT_CONFIG_LOG
	select UBOOT_CONFIG_GETOPT
	help
	  This provides access to logging features. It allows the output of
	  log data to be controlled to a limited extent (setting up the default
	  maximum log level for emitting of records). It also provides access
	  to a command used for testing the log system.

config UBOOT_CONFIG_CMD_TRACE
	bool "trace - Support tracing of function calls and timing"
	help
	  Enables a command to control using of function tracing within
	  U-Boot. This allows recording of call traces including timing
	  information. The command can write data to memory for exporting
	  for analysis (e.g. using bootchart). See doc/README.trace for full
	  details.

config UBOOT_CONFIG_CMD_AVB
	bool "avb - Android Verified Boot 2.0 operations"
	depends on UBOOT_CONFIG_AVB_VERIFY
	help
	  Enables a "avb" command to perform verification of partitions using
	  Android Verified Boot 2.0 functionality. It includes such subcommands:
	    avb init - initialize avb2 subsystem
	    avb read_rb - read rollback index
	    avb write_rb - write rollback index
	    avb is_unlocked - check device lock state
	    avb get_uuid - read and print uuid of a partition
	    avb read_part - read data from partition
	    avb read_part_hex - read data from partition and output to stdout
	    avb write_part - write data to partition
	    avb verify - run full verification chain

config UBOOT_CONFIG_CMD_STACKPROTECTOR_TEST
	bool "Test command for stack protector"
	depends on UBOOT_CONFIG_STACKPROTECTOR
	help
	  Enable stackprot_test command
	  The stackprot_test command will force a stack overrun to test
	  the stack smashing detection mechanisms.

endmenu

config UBOOT_CONFIG_CMD_UBI
	tristate "Enable UBI - Unsorted block images commands"
	select UBOOT_CONFIG_MTD_UBI
	help
	  UBI is a software layer above MTD layer which admits use of LVM-like
	  logical volumes on top of MTD devices, hides some complexities of
	  flash chips like wear and bad blocks and provides some other useful
	  capabilities. Please, consult the MTD web site for more details
	  (www.linux-mtd.infradead.org). Activate this option if you want
	  to use U-Boot UBI commands.
	  It is also strongly encouraged to also enable CONFIG_MTD to get full
	  partition support.

config UBOOT_CONFIG_CMD_UBI_RENAME
       bool "Enable rename"
       depends on UBOOT_CONFIG_CMD_UBI
       help
         Enable a "ubi" command to rename ubi volume:
	   ubi rename <oldname> <newname>

config UBOOT_CONFIG_CMD_UBIFS
	tristate "Enable UBIFS - Unsorted block images filesystem commands"
	depends on UBOOT_CONFIG_CMD_UBI
	default y if UBOOT_CONFIG_CMD_UBI
	select UBOOT_CONFIG_LZO
	help
	  UBIFS is a file system for flash devices which works on top of UBI.

config UBOOT_CONFIG_MMC_SPEED_MODE_SET
	bool "set speed mode using mmc command"
	depends on UBOOT_CONFIG_CMD_MMC
	default n
	help
	  Enable setting speed mode using mmc rescan and mmc dev commands.
	  The speed mode is provided as the last argument in these commands
	  and is indicated using the index from enum bus_mode in
	  include/mmc.h. A speed mode can be set only if it has already
	  been enabled in the device tree.
endmenu
