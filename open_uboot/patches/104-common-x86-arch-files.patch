# HG changeset patch
# Parent  a5a5cf82a2e91c3e28d9abac9c854479559f03e6

diff --git a/arch/x86/cpu/cpu.c b/arch/x86/cpu/cpu.c
--- a/arch/x86/cpu/cpu.c
+++ b/arch/x86/cpu/cpu.c
@@ -89,10 +89,12 @@ int x86_init_cache(void)
 }
 int init_cache(void) __attribute__((weak, alias("x86_init_cache")));
 
+#ifndef CONFIG_VENDOR_MAXLINEAR
 void  flush_cache(unsigned long dummy1, unsigned long dummy2)
 {
 	asm("wbinvd\n");
 }
+#endif /* CONFIG_VENDOR_MAXLINEAR */
 
 /* Define these functions to allow ehch-hcd to function */
 void flush_dcache_range(unsigned long start, unsigned long stop)
@@ -281,6 +283,7 @@ int cpu_init_r(void)
 	if (ret)
 		return ret;
 
+#ifndef CONFIG_VENDOR_MAXLINEAR
 	/*
 	 * Set up the northbridge, PCH and LPC if available. Note that these
 	 * may have had some limited pre-relocation init if they were probed
@@ -293,6 +296,7 @@ int cpu_init_r(void)
 	/* Set up pin control if available */
 	ret = syscon_get_by_driver_data(X86_SYSCON_PINCONF, &dev);
 	debug("%s, pinctrl=%p, ret=%d\n", __func__, dev, ret);
+#endif /* CONFIG_VENDOR_MAXLINEAR */
 
 	return 0;
 }
@@ -300,9 +304,6 @@ int cpu_init_r(void)
 #ifndef CONFIG_EFI_STUB
 int reserve_arch(void)
 {
-	struct udevice *itss;
-	int ret;
-
 	if (IS_ENABLED(CONFIG_ENABLE_MRC_CACHE))
 		mrccache_reserve();
 
@@ -320,6 +321,10 @@ int reserve_arch(void)
 			fsp_save_s3_stack();
 		}
 	}
+#ifdef CONFIG_IRQ
+	struct udevice *itss;
+	int ret;
+
 	ret = irq_first_device_type(X86_IRQT_ITSS, &itss);
 	if (!ret) {
 		/*
@@ -329,7 +334,7 @@ int reserve_arch(void)
 		 */
 		irq_snapshot_polarities(itss);
 	}
-
+#endif
 	return 0;
 }
 #endif
diff --git a/arch/x86/cpu/i386/call64.S b/arch/x86/cpu/i386/call64.S
--- a/arch/x86/cpu/i386/call64.S
+++ b/arch/x86/cpu/i386/call64.S
@@ -10,7 +10,14 @@
 #include <asm/processor-flags.h>
 
 .code32
+#ifndef CONFIG_VENDOR_MAXLINEAR
+/* UBOOT_SW-1471
+ * for LGM it has to be in the .text section else do_elf_reloc_fixups()
+ * will no be able to find the entry, hence the gdt address will not be update
+ * after relocation
+ */
 .section .text_call64
+#endif
 .globl cpu_call64
 cpu_call64:
 	/*
diff --git a/arch/x86/include/asm/io.h b/arch/x86/include/asm/io.h
--- a/arch/x86/include/asm/io.h
+++ b/arch/x86/include/asm/io.h
@@ -128,6 +128,58 @@
 #define setbits_8(addr, set) setbits(8, addr, set)
 #define clrsetbits_8(addr, clear, set) clrsetbits(8, addr, clear, set)
 
+#define writesl(a, d, s)	__raw_writesl((unsigned long)a, d, s)
+#define readsl(a, d, s)		__raw_readsl((unsigned long)a, d, s)
+#define writesw(a, d, s)	__raw_writesw((unsigned long)a, d, s)
+#define readsw(a, d, s)		__raw_readsw((unsigned long)a, d, s)
+#define writesb(a, d, s)	__raw_writesb((unsigned long)a, d, s)
+#define readsb(a, d, s)		__raw_readsb((unsigned long)a, d, s)
+
+static inline void __raw_writesb(unsigned long addr, const void *data,
+				 int bytelen)
+{
+	uint8_t *buf = (uint8_t *)data;
+	while(bytelen--)
+		__raw_writeb(*buf++, addr);
+}
+
+static inline void __raw_writesw(unsigned long addr, const void *data,
+				 int wordlen)
+{
+	uint16_t *buf = (uint16_t *)data;
+	while(wordlen--)
+		__raw_writew(*buf++, addr);
+}
+
+static inline void __raw_writesl(unsigned long addr, const void *data,
+				 int longlen)
+{
+	uint32_t *buf = (uint32_t *)data;
+	while(longlen--)
+		__raw_writel(*buf++, addr);
+}
+
+static inline void __raw_readsb(unsigned long addr, void *data, int bytelen)
+{
+	uint8_t *buf = (uint8_t *)data;
+	while(bytelen--)
+		*buf++ = __raw_readb(addr);
+}
+
+static inline void __raw_readsw(unsigned long addr, void *data, int wordlen)
+{
+	uint16_t *buf = (uint16_t *)data;
+	while(wordlen--)
+		*buf++ = __raw_readw(addr);
+}
+
+static inline void __raw_readsl(unsigned long addr, void *data, int longlen)
+{
+	uint32_t *buf = (uint32_t *)data;
+	while(longlen--)
+		*buf++ = __raw_readl(addr);
+}
+
 #endif /* __KERNEL__ */
 
 #ifdef SLOW_IO_BY_JUMPING
