# HG changeset patch
# Parent  9bf886fd145d2bc17f72d37378cea6998c91306e

diff --git a/common/gpt_part_abstract.c b/common/gpt_part_abstract.c
new file mode 100644
--- /dev/null
+++ b/common/gpt_part_abstract.c
@@ -0,0 +1,284 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright Â© 2022 MaxLinear, Inc.
+ *
+ * Extract blocksize variables from gpt partition 
+ * definition from 'partitions'
+ */
+
+#include <common.h>
+#include <command.h>
+#include <env.h>
+#include <log.h>
+#include <mmc.h>
+#include <part.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define MAX_PART_NAME_LEN	128
+#define MMC_BLK_SIZE		(512 << 10)
+
+struct gpt_part_info {
+	char *name;
+	unsigned long size;
+	unsigned long start;
+};
+
+unsigned long parse_part_size(char *part_size)
+{
+	int len = strlen(part_size);
+	char suffix;
+	char *size;
+	unsigned long sz;
+
+	size = strdup(part_size);
+	if (size == NULL)
+		return 0;
+
+	memcpy(size, size, len - 1);
+	suffix = part_size[len - 1];
+	sz = simple_strtoul(size, NULL, 0);
+	switch (suffix) {
+	case 'g':
+	case 'G':
+		sz <<= 10;
+	case 'm':
+	case 'M':
+		sz <<= 10;
+	case 'k':
+	case 'K':
+		sz <<= 10;
+	default:
+		break;
+	}
+	return sz;
+}
+
+/* extract partition name and size from token */
+static int extract_data(char *partition_entry, struct gpt_part_info *gpt)
+{
+	char *start, *size, *name;
+	unsigned long part_size;
+
+	if (!partition_entry || strlen(partition_entry) < 4)
+		return 1;
+
+	/* start with: name=uboot_a,start=512k,size=1M */
+	name = strsep(&partition_entry, ",");
+	if (name == NULL)
+		return -EINVAL;
+
+	/* name=uboot_a */
+	strsep(&name, "=");
+	if (name == NULL)
+		return -EINVAL;
+
+	/* start=512k,size=1M or size=1M */
+	if (!strncmp(partition_entry, "start", 5)) {
+		start = strsep(&partition_entry, ",");
+		strsep(&start, "=");
+		gpt->start = parse_part_size(start);
+	}
+
+	/* size=1M */
+	size = strsep(&partition_entry, "=");
+	if (size == NULL)
+		return EINVAL;
+
+	part_size = parse_part_size(partition_entry); 
+
+	debug("name: %s, size: %lu\n", name, part_size); 
+	gpt->size = part_size;
+	gpt->name = name;
+	return 0;
+}
+
+#ifdef CONFIG_DEBUG
+static void print_gpt_info(struct gpt_part_info *gpt, int num_partitions)
+{
+	int i;
+
+	printf("### Partition name ### size ### offset ### \n");
+	for (i = 0; i < num_partitions; i++, gpt++) {
+		printf("#%d: %s\t\t%lu\t%lu\n",
+			i, gpt->name, gpt->size, gpt->start);
+	}
+}
+#endif
+
+static unsigned long get_mmc_blksize(void)
+{
+	int dev = mmc_get_env_dev();
+	struct mmc *mmc = find_mmc_device(dev);
+
+	return mmc->erase_grp_size * 512;
+}
+
+/* set the blk start offset env variable */
+static void set_env_blk_start(struct gpt_part_info *gpt,
+				int num_partitions)
+{
+	int i;
+	unsigned long blk_start;
+	unsigned long blk = 512;
+	int namelen;
+	char env_name[MAX_PART_NAME_LEN] = { 0 };
+	struct gpt_part_info *tmp;
+
+	tmp = gpt;
+	for (i = 0; i < num_partitions; i++, tmp++) {
+		namelen = strlen(tmp->name);
+		if ((namelen + 12) > MAX_PART_NAME_LEN) {
+			printf("Partition name too long\n");
+			continue;
+		}
+		/* ${<xyz>_block_start} address for user mmc read/write ops */
+		strncpy(env_name, tmp->name, MAX_PART_NAME_LEN);
+		strncat(env_name, "_block_start", 12);
+		blk_start = tmp->start / blk;
+		debug("%s: 0x%lx\n", env_name, blk_start);
+		env_set_hex(env_name, blk_start);
+
+		/* ${<xyz>_start} address for gpt partition */
+		strncpy(env_name, tmp->name, MAX_PART_NAME_LEN);
+		strncat(env_name, "_start", 6);
+		debug("%s: 0x%lx\n", env_name, tmp->start);
+		env_set_hex(env_name, tmp->start);
+	}
+}
+
+/* set the blk size env variable */
+static void set_env_blk_size(struct gpt_part_info *gpt,
+				int num_partitions)
+{
+	int i;
+	unsigned long blk_size;
+	unsigned long blk = 512;
+	int namelen;
+	char env_name[MAX_PART_NAME_LEN] = { 0 };
+	struct gpt_part_info *tmp;
+
+	tmp = gpt;
+	for (i = 0; i < num_partitions; i++, tmp++) {
+		if ((namelen + 12) > MAX_PART_NAME_LEN) {
+			printf("Partition name too long\n");
+			continue;
+		}
+		/* ${<xyz>_block_size} address for user mmc read/write ops */
+		strncpy(env_name, tmp->name, MAX_PART_NAME_LEN);
+		strncat(env_name, "_block_size", 12);
+		blk_size = tmp->size / blk;
+		debug("%s: 0x%lx\n", env_name, blk_size);
+		env_set_hex(env_name, blk_size);
+
+		/* ${<xyz>_size} address for gpt partition */
+		strncpy(env_name, tmp->name, MAX_PART_NAME_LEN);
+		strncat(env_name, "_size", 6);
+		debug("%s: 0x%lx\n", env_name, tmp->size);
+		env_set_hex(env_name, tmp->size);
+	}
+
+}
+
+static int parse_and_set_partitions(struct gpt_part_info *gpt,
+				char *partitions, int num_partitions)
+{
+	int i, ret;
+	char *tok; 
+	char *str, *str_cpy;
+	unsigned long erase_size, part_offset;
+	struct gpt_part_info *gpt_ptr;
+
+	erase_size = part_offset = get_mmc_blksize();
+
+	/* Fail safe, if indeed zero, we fallback to a known
+	 * mmc erase size 512KB
+	*/
+	if (erase_size == 0)
+		erase_size = (1 << 20);
+
+	str_cpy = strdup(partitions);
+	if (str == NULL)
+		return -ENOMEM;
+
+	/* remove the initial 'partitions=' */
+	if (strstr(str_cpy, "partitions="))
+		str = &str_cpy[11];
+	else
+		str = str_cpy;
+
+	gpt_ptr = gpt;
+
+	for (i = 0; i < num_partitions; i++, gpt_ptr++) {
+		tok = strsep(&str, ";");
+		ret = extract_data(tok, gpt_ptr);
+		if (ret)
+			return 1;
+
+		/* if the start address is defined,
+		 * use it as the part offs
+		*/
+		if (gpt_ptr->start != 0)
+			part_offset = gpt_ptr->start;
+		else
+			gpt_ptr->start = part_offset;
+		
+		/* Ensure that the physical partition is aligned
+		 * to the emmc erase blocksize
+		 */
+		if (gpt_ptr->size & (erase_size - 1)) {
+			printf("WARNING: Partition %s definition is not aligned to erase size %lu\n",
+				gpt_ptr->name, erase_size);
+			part_offset += (gpt_ptr->size
+					+ (erase_size - (gpt_ptr->size % erase_size)));
+		} else {
+			part_offset += gpt_ptr->size;
+		}
+	}
+
+	/* failure ?*/
+	if (i != num_partitions)
+		return 1;
+
+#ifdef CONFIG_DEBUG
+	print_gpt_info(gpt, num_partitions); 
+#endif
+
+	return 0;
+}
+
+int build_gpt_table(const char *partitions, unsigned long num_partitions)
+{
+	int ret;
+	struct gpt_part_info *gpt;
+	char *str_cpy = (char *)partitions;
+
+	gpt = (struct gpt_part_info *)
+		calloc(num_partitions, sizeof(struct gpt_part_info));
+	if (gpt == NULL)
+		return -ENOMEM;
+
+	ret = parse_and_set_partitions(gpt, str_cpy, num_partitions);
+	if (ret)
+		return ret;
+
+	set_env_blk_start(gpt, num_partitions);
+	set_env_blk_size(gpt, num_partitions);
+	
+	return 0;
+}
+
+static int do_mmcparse(struct cmd_tbl *cmdtp, int flag, int argc,
+		   char *const argv[])
+{
+	unsigned long totalpart;
+
+	totalpart = simple_strtoul(argv[2], NULL, 0);
+	build_gpt_table(argv[1], totalpart);
+	return 0;
+}
+
+U_BOOT_CMD(parsemmc, 3, 0, do_mmcparse,
+	"parsemmc $varname",
+	"varname is in name1(size),name2(size) format\n"
+);
