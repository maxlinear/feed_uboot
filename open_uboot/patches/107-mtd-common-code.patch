# HG changeset patch
# Parent  f985c6ad671af406cf7a7c8ad868ba2d07fd5855

diff --git a/drivers/mtd/nand/spi/core.c b/drivers/mtd/nand/spi/core.c
--- a/drivers/mtd/nand/spi/core.c
+++ b/drivers/mtd/nand/spi/core.c
@@ -920,17 +920,27 @@ spinand_select_op_variant(struct spinand
  */
 int spinand_match_and_init(struct spinand_device *spinand,
 			   const struct spinand_info *table,
-			   unsigned int table_size, u8 devid)
+			   unsigned int table_size, u8 *devid, u32 devid_len)
 {
 	struct nand_device *nand = spinand_to_nand(spinand);
 	unsigned int i;
 
+#if defined(CONFIG_SPI_FLASH_QUAD)
+	spinand->slave->mode = SPI_RX_QUAD;
+#endif
+
 	for (i = 0; i < table_size; i++) {
 		const struct spinand_info *info = &table[i];
 		const struct spi_mem_op *op;
 
-		if (devid != info->devid)
-			continue;
+		if (devid_len == 2) {
+			if (devid[0] != info->devid ||
+			    devid[1] != info->devid_ext)
+				continue;
+		} else {
+			if (devid[0] != info->devid)
+				continue;
+		}
 
 		nand->memorg = table[i].memorg;
 		nand->eccreq = table[i].eccreq;
diff --git a/drivers/mtd/nand/spi/gigadevice.c b/drivers/mtd/nand/spi/gigadevice.c
--- a/drivers/mtd/nand/spi/gigadevice.c
+++ b/drivers/mtd/nand/spi/gigadevice.c
@@ -66,9 +66,14 @@ static int gd5fxgqxxexxg_ooblayout_free(
 	if (section)
 		return -ERANGE;
 
+#if !defined(CONFIG_RAW_NAND_OOB_COMPATIBLE)
 	/* Reserve 1 bytes for the BBM. */
 	region->offset = 1;
 	region->length = 63;
+#else
+	region->offset = 0;
+	region->length = 64;
+#endif
 
 	return 0;
 }
@@ -192,7 +197,7 @@ static int gigadevice_spinand_detect(str
 
 	ret = spinand_match_and_init(spinand, gigadevice_spinand_table,
 				     ARRAY_SIZE(gigadevice_spinand_table),
-				     id[2]);
+				     &id[2], 1);
 	if (ret)
 		return ret;
 
diff --git a/drivers/mtd/nand/spi/macronix.c b/drivers/mtd/nand/spi/macronix.c
--- a/drivers/mtd/nand/spi/macronix.c
+++ b/drivers/mtd/nand/spi/macronix.c
@@ -43,8 +43,13 @@ static int mx35lfxge4ab_ooblayout_free(s
 	if (section)
 		return -ERANGE;
 
+#if !defined(CONFIG_RAW_NAND_OOB_COMPATIBLE)
 	region->offset = 2;
 	region->length = mtd->oobsize - 2;
+#else
+	region->offset = 0;
+	region->length = mtd->oobsize;
+#endif
 
 	return 0;
 }
@@ -122,6 +127,14 @@ static const struct spinand_info macroni
 					      &update_cache_variants),
 		     SPINAND_HAS_QE_BIT,
 		     SPINAND_ECCINFO(&mx35lfxge4ab_ooblayout, NULL)),
+	SPINAND_INFO("MX35LF2G24AD",  0x24,
+		     NAND_MEMORG(1, 2048, 128, 64, 2048, 2, 1, 1),
+		     NAND_ECCREQ(8, 512),
+		     SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
+					      &write_cache_variants,
+					      &update_cache_variants),
+		     SPINAND_HAS_QE_BIT,
+		     SPINAND_ECCINFO(&mx35lfxge4ab_ooblayout, NULL)),
 	SPINAND_INFO("MX35UF4GE4AD", 0xb7,
 		     NAND_MEMORG(1, 4096, 256, 64, 2048, 1, 1, 1),
 		     NAND_ECCREQ(8, 512),
@@ -184,7 +197,7 @@ static int macronix_spinand_detect(struc
 
 	ret = spinand_match_and_init(spinand, macronix_spinand_table,
 				     ARRAY_SIZE(macronix_spinand_table),
-				     id[2]);
+				     &id[2], 1);
 	if (ret)
 		return ret;
 
diff --git a/drivers/mtd/nand/spi/micron.c b/drivers/mtd/nand/spi/micron.c
--- a/drivers/mtd/nand/spi/micron.c
+++ b/drivers/mtd/nand/spi/micron.c
@@ -66,9 +66,14 @@ static int micron_8_ooblayout_free(struc
 	if (section)
 		return -ERANGE;
 
+#if !defined(CONFIG_RAW_NAND_OOB_COMPATIBLE)
 	/* Reserve 2 bytes for the BBM. */
 	region->offset = 2;
 	region->length = (mtd->oobsize / 2) - 2;
+#else
+	region->offset = 0;
+	region->length = mtd->oobsize / 2;
+#endif
 
 	return 0;
 }
@@ -227,7 +232,7 @@ static int micron_spinand_detect(struct 
 		return 0;
 
 	ret = spinand_match_and_init(spinand, micron_spinand_table,
-				     ARRAY_SIZE(micron_spinand_table), id[2]);
+				     ARRAY_SIZE(micron_spinand_table), &id[2], 1);
 	if (ret)
 		return ret;
 
diff --git a/drivers/mtd/nand/spi/toshiba.c b/drivers/mtd/nand/spi/toshiba.c
--- a/drivers/mtd/nand/spi/toshiba.c
+++ b/drivers/mtd/nand/spi/toshiba.c
@@ -59,9 +59,14 @@ static int tx58cxgxsxraix_ooblayout_free
 	if (section > 0)
 		return -ERANGE;
 
+#if !defined(CONFIG_RAW_NAND_OOB_COMPATIBLE)
 	/* 2 bytes reserved for BBM */
 	region->offset = 2;
 	region->length = (mtd->oobsize / 2) - 2;
+#else
+	region->offset = 0;
+	region->length = mtd->oobsize / 2;
+#endif
 
 	return 0;
 }
@@ -271,7 +276,7 @@ static int toshiba_spinand_detect(struct
 
 	ret = spinand_match_and_init(spinand, toshiba_spinand_table,
 				     ARRAY_SIZE(toshiba_spinand_table),
-				     id[2]);
+				     &id[2], 1);
 	if (ret)
 		return ret;
 
diff --git a/drivers/mtd/nand/spi/winbond.c b/drivers/mtd/nand/spi/winbond.c
--- a/drivers/mtd/nand/spi/winbond.c
+++ b/drivers/mtd/nand/spi/winbond.c
@@ -53,8 +53,13 @@ static int w25m02gv_ooblayout_free(struc
 	if (section > 3)
 		return -ERANGE;
 
+#if !defined(CONFIG_RAW_NAND_OOB_COMPATIBLE)
 	region->offset = (16 * section) + 2;
 	region->length = 6;
+#else
+	region->offset = 0;
+	region->length = mtd->oobsize;
+#endif
 
 	return 0;
 }
@@ -95,7 +100,17 @@ static const struct spinand_info winbond
 					      &write_cache_variants,
 					      &update_cache_variants),
 		     0,
-		     SPINAND_ECCINFO(&w25m02gv_ooblayout, NULL)),
+		     SPINAND_ECCINFO(&w25m02gv_ooblayout, NULL),
+		     SPINAND_DEVID_EXT(0x11)),
+	SPINAND_INFO("W25N02kV", 0xAA,
+		     NAND_MEMORG(1, 2048, 128, 64, 2048/*1024*/, 1, 1, 1), /* test single lun / target full 2GB*/
+		     NAND_ECCREQ(1, 512),
+		     SPINAND_INFO_OP_VARIANTS(&read_cache_variants,
+					      &write_cache_variants,
+					      &update_cache_variants),
+		     0,
+		     SPINAND_ECCINFO(&w25m02gv_ooblayout, NULL),
+		     SPINAND_DEVID_EXT(0x22)),
 };
 
 /**
@@ -116,7 +131,7 @@ static int winbond_spinand_detect(struct
 		return 0;
 
 	ret = spinand_match_and_init(spinand, winbond_spinand_table,
-				     ARRAY_SIZE(winbond_spinand_table), id[2]);
+				     ARRAY_SIZE(winbond_spinand_table), &id[2], 2);
 	if (ret)
 		return ret;
 
diff --git a/include/linux/mtd/spinand.h b/include/linux/mtd/spinand.h
--- a/include/linux/mtd/spinand.h
+++ b/include/linux/mtd/spinand.h
@@ -269,6 +269,7 @@ struct spinand_ecc_info {
 struct spinand_info {
 	const char *model;
 	u8 devid;
+	u8 devid_ext;
 	u32 flags;
 	struct nand_memory_organization memorg;
 	struct nand_ecc_req eccreq;
@@ -310,6 +311,9 @@ struct spinand_info {
 		__VA_ARGS__						\
 	}
 
+#define SPINAND_DEVID_EXT(__devid_ext)					\
+	.devid_ext = __devid_ext,
+
 /**
  * struct spinand_device - SPI NAND device instance
  * @base: NAND device instance
@@ -442,7 +446,7 @@ static inline void spinand_set_ofnode(st
 
 int spinand_match_and_init(struct spinand_device *dev,
 			   const struct spinand_info *table,
-			   unsigned int table_size, u8 devid);
+			   unsigned int table_size, u8 *devid, u32 devid_len);
 
 int spinand_upd_cfg(struct spinand_device *spinand, u8 mask, u8 val);
 int spinand_select_target(struct spinand_device *spinand, unsigned int target);
