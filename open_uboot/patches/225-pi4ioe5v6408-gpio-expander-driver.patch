# HG changeset patch
# Parent  9b3b94c9ce924a7df35b1768ef8d13ae00458353

diff --git a/drivers/gpio/pi4ioe5v6408_gpio.c b/drivers/gpio/pi4ioe5v6408_gpio.c
new file mode 100644
--- /dev/null
+++ b/drivers/gpio/pi4ioe5v6408_gpio.c
@@ -0,0 +1,701 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ *
+ * Copyright (C) 2023 Wang Yunliang <yunliangwang@maxlinear.com>
+ *
+ */
+
+#include <common.h>
+#include <errno.h>
+#include <dm.h>
+#include <fdtdec.h>
+#include <i2c.h>
+#include <malloc.h>
+#include <asm/gpio.h>
+#include <asm/io.h>
+#include <dm/device_compat.h>
+#include <dt-bindings/gpio/gpio.h>
+#include <linux/bitops.h>
+#include <time.h>
+#include <linux/delay.h>
+#include <pi4ioe5v6408_gpio.h>
+
+#define PI4IOE5V6408_INPUT           0x0f
+#define PI4IOE5V6408_OUTPUT          0x05
+#define PI4IOE5V6408_DIRECTION       0x03
+
+#define PCA_GPIO_MASK           0x00FF
+#define PCA_INT                 0x0100
+#define PI4IOE5V6408_TYPE            0x1000
+#define PCA957X_TYPE            0x2000
+#define PCA_TYPE_MASK           0xF000
+#define PCA_CHIP_TYPE(x)        ((x) & PCA_TYPE_MASK)
+
+enum {
+	PI4IOE5V6408_DIRECTION_IN,
+	PI4IOE5V6408_DIRECTION_OUT,
+};
+
+#define MAX_BANK 1
+#define BANK_SZ 8
+
+/*
+ * struct PI4IOE5V6408_info - Data for PI4IOE5V6408
+ *
+ * @dev: udevice structure for the device
+ * @addr: i2c slave address
+ * @invert: Polarity inversion or not
+ * @gpio_count: the number of gpio pins that the device supports
+ * @chip_type: indicate the chip type,PI4IOE5V6408
+ * @bank_count: the number of banks that the device supports
+ * @reg_output: array to hold the value of output registers
+ * @reg_direction: array to hold the value of direction registers
+ */
+struct PI4IOE5V6408_info {
+	struct udevice *dev;
+	int addr;
+	int invert;
+	int gpio_count;
+	int chip_type;
+	int bank_count;
+	u8 reg_output[MAX_BANK];
+	u8 reg_direction[MAX_BANK];
+};
+
+#ifdef CONFIG_DM_PI4IOE5V6408
+#if CONFIG_IS_ENABLED(DM_I2C)
+
+extern struct udevice *i2c_expander_dev;
+
+extern int i2c_read_dev(u32 i2c_bus, u32 i2c_addr, u32 i2c_chip_offset, u32 byte_len, u8* mem, int alen);
+extern int i2c_write_dev(u32 i2c_bus, u32 i2c_addr, u32 i2c_chip_offset, u32 byte_len, u8* mem, int alen);
+extern int init_i2c_dev(u32 i2c_bus, u32 i2c_addr, int alen);
+
+	/*
+	i2c_expander_reg01h
+	7:5	manufacture ID
+	4:2	fw ver
+	1	reset int status
+	0	sft reset control
+	*/
+	/*read on clear*/
+u8 i2c_expander_reg01h_rst_int_status_rd(void)
+{
+	u32 offset_byte_addr = 1;
+	u32 byte_len = 1;
+	u8 mem = 0;
+
+	dm_i2c_read(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+	return ((mem >> 1) & 1);
+}
+
+u8 i2c_expander_reg01h_manu_id_rd(void)
+{
+	u32 offset_byte_addr = 1;
+	u32 byte_len = 1;
+	u8 mem = 0;
+
+	dm_i2c_read(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+	return ((mem >> 5) & 7);
+}
+
+u8 i2c_expander_reg01h_fw_ver_rd(void)
+{
+	u32 offset_byte_addr = 1;
+	u32 byte_len = 1;
+	u8 mem = 0;
+
+	dm_i2c_read(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+	return ((mem >> 2) & 7);
+}
+
+int i2c_expander_reg01h_sft_rst_wr(void)
+{
+	u32 offset_byte_addr = 1;
+	u32 byte_len = 1;
+	u8 mem = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+
+	/*
+	i2c_expander_reg03h
+	7:0	0=input
+		1=output
+	*/
+
+int i2c_expander_reg03h_io_dir_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 3;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg03h_io_dir_wr(u8 mem)
+{
+	u32 offset_byte_addr = 3;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg05h
+	7:0	0=low
+		1=high
+	*/
+int i2c_expander_reg05h_output_value_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 5;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg05h_output_value_wr(u8 mem)
+{
+	u32 offset_byte_addr = 5;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg07h
+	7:0	0 = normal = no high impedance
+		1 = high impedance
+	*/
+int i2c_expander_reg07h_high_impedance_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 7;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg07h_high_impedance_wr(u8 mem)
+{
+	u32 offset_byte_addr = 7;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg09h
+	7:0	0 = input default state is low
+		1 = input default state is high
+	*/
+int i2c_expander_reg09h_input_default_state_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 9;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg09h_input_default_state_wr(u8 mem)
+{
+	u32 offset_byte_addr = 9;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg0bh
+	7:0	0 = pull up/down disabled
+		1 = pull up/down enabled
+	*/
+int i2c_expander_reg0bh_pull_up_down_en_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 0x0b;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg0bh_pull_up_down_en_wr(u8 mem)
+{
+	u32 offset_byte_addr = 0x0b;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg0dh
+	7:0	0 = pull down selected
+		1 = pull up selected
+	*/
+int i2c_expander_reg0dh_pull_up_down_sel_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 0x0d;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg0dh_pull_up_down_sel_wr(u8 mem)
+{
+	u32 offset_byte_addr = 0x0d;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg0fh
+	7:0	0 = gpio input pin vlaue is low
+		1 = gpio input pin vlaue is high
+		gpio output pin vlaues are all 0
+	*/
+int i2c_expander_reg0fh_gpio_input_val_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 0x0f;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+
+	/*
+	i2c_expander_reg11h
+	7:0	0 = interrupt enabled
+		1 = interrupt disabled/masked
+	*/
+int i2c_expander_reg11h_irq_mask_val_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 0x11;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+int i2c_expander_reg11h_irq_mask_val_wr(u8 mem)
+{
+	u32 offset_byte_addr = 0x11;
+	u32 byte_len = 1;
+
+	return dm_i2c_write(i2c_expander_dev, offset_byte_addr, &mem, byte_len);
+}
+
+	/*
+	i2c_expander_reg13h
+	7:0	0 = gpio input pin vlaue is not changed to opposite value of the same pin within input default state reg(0x09) 
+		1 = gpio input pin vlaue is changed to opposite value of the same pin within input default state reg(0x09) 
+		gpio output pin vlaues are all 0
+	*/
+int i2c_expander_reg13h_irq_status_val_rd(u8 *pmem)
+{
+	u32 offset_byte_addr = 0x13;
+	u32 byte_len = 1;
+
+	return dm_i2c_read(i2c_expander_dev, offset_byte_addr, pmem, byte_len);
+}
+
+u8 read_power_good(void)
+{
+	u8 mem = 0;
+	u8 power_good_bit_pos = 6;
+	u8 power_good_bit_val;
+
+	i2c_expander_reg0fh_gpio_input_val_rd(&mem);
+	power_good_bit_val = (mem >> power_good_bit_pos) & 1;
+
+	return power_good_bit_val;
+}
+
+u8 output_value_set(u8 pos, u8 val)
+{
+	u8 mem;
+
+	i2c_expander_reg05h_output_value_rd(&mem);
+	mem &= ~(1 << pos);
+	mem |= (val << pos);
+	i2c_expander_reg05h_output_value_wr(mem);
+
+	return 0;
+}
+
+#endif
+#endif
+
+static int PI4IOE5V6408_read_regs(struct udevice *dev, int reg, u8 *val)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int ret = 0;
+
+	if (info->gpio_count <= 8) {
+		ret = dm_i2c_read(dev, reg, val, 1);
+	} else {
+		dev_err(dev, "Unsupported now\n");
+		return -EINVAL;
+	}
+
+	return ret;
+}
+#if 0
+static int PI4IOE5V6408_write_regs(struct udevice *dev, int reg, u8 *val)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int ret = 0;
+
+	if (info->gpio_count <= 8) {
+		ret = dm_i2c_write(dev, reg, val, 1);
+	} else {
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int PI4IOE5V6408_is_output(struct udevice *dev, int offset)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int bank = 0;
+
+	/*1: output; 0: input */
+	return (info->reg_direction[bank] & (1 << offset));
+}
+
+static int PI4IOE5V6408_get_value(struct udevice *dev, uint offset)
+{
+	int ret;
+	u8 val = 0;
+
+	ret = PI4IOE5V6408_read_regs(dev, PI4IOE5V6408_INPUT, &val);
+	if (ret)
+		return ret;
+
+	return (val >> offset) & 0x1;
+}
+
+static int PI4IOE5V6408_set_value(struct udevice *dev, uint offset, int value)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int bank = 0;
+	u8 val;
+	int ret;
+
+	if (value)
+		val = info->reg_output[bank] | (1 << offset);
+	else
+		val = info->reg_output[bank] & ~(1 << offset);
+
+	//ret = PI4IOE5V6408_write_single(dev, PI4IOE5V6408_OUTPUT, val, offset);
+	ret = PI4IOE5V6408_write_regs(dev, PI4IOE5V6408_OUTPUT, &val);
+	if (ret)
+		return ret;
+
+	info->reg_output[bank] = val;
+
+	return 0;
+}
+
+static int PI4IOE5V6408_set_direction(struct udevice *dev, uint offset, int dir)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int bank = 0;
+	u8 val;
+	int ret;
+
+	if (dir == PI4IOE5V6408_DIRECTION_IN)
+		val = info->reg_direction[bank] & ~(1 << offset);
+	else
+		val = info->reg_direction[bank] | (1 << offset);
+
+	//ret = PI4IOE5V6408_write_single(dev, PI4IOE5V6408_DIRECTION, val, offset);
+	ret = PI4IOE5V6408_write_regs(dev, PI4IOE5V6408_DIRECTION, &val);
+	if (ret)
+		return ret;
+
+	info->reg_direction[bank] = val;
+
+	return 0;
+}
+
+static int PI4IOE5V6408_direction_input(struct udevice *dev, uint offset)
+{
+	return PI4IOE5V6408_set_direction(dev, offset, PI4IOE5V6408_DIRECTION_IN);
+}
+
+static int PI4IOE5V6408_direction_output(struct udevice *dev, uint offset, int value)
+{
+	/* Configure output value. */
+	PI4IOE5V6408_set_value(dev, offset, value);
+
+	/* Configure direction as output. */
+	PI4IOE5V6408_set_direction(dev, offset, PI4IOE5V6408_DIRECTION_OUT);
+
+	return 0;
+}
+
+static int PI4IOE5V6408_get_function(struct udevice *dev, uint offset)
+{
+	if (PI4IOE5V6408_is_output(dev, offset))
+		return GPIOF_OUTPUT;
+	else
+		return GPIOF_INPUT;
+}
+
+static int PI4IOE5V6408_xlate(struct udevice *dev, struct gpio_desc *desc,
+			 struct ofnode_phandle_args *args)
+{
+	desc->offset = args->args[0];
+	desc->flags = args->args[1] & GPIO_ACTIVE_LOW ? GPIOD_ACTIVE_LOW : 0;
+
+	return 0;
+}
+
+static const struct dm_gpio_ops PI4IOE5V6408_ops = {
+	.direction_input	= PI4IOE5V6408_direction_input,
+	.direction_output	= PI4IOE5V6408_direction_output,
+	.get_value		= PI4IOE5V6408_get_value,
+	.set_value		= PI4IOE5V6408_set_value,
+	.get_function		= PI4IOE5V6408_get_function,
+	.xlate			= PI4IOE5V6408_xlate,
+};
+#endif
+static int PI4IOE5V6408_probe(struct udevice *dev)
+{
+	struct PI4IOE5V6408_info *info = dev_get_plat(dev);
+	int addr;
+	int ret;
+
+printf("\n\n\n\n\n PI4IOE5V6408_probe \n\n\n\n\n");
+	//wyl
+	info->dev = dev;
+	info->invert = 0;
+
+	//addr = dev_read_addr(dev);
+	addr = 0x44;
+
+	if (addr == 0)
+		return -ENODEV;
+
+	info->addr = addr;
+
+	//driver_data = dev_get_driver_data(dev);
+
+	//info->gpio_count = driver_data & PCA_GPIO_MASK;
+	info->gpio_count = 8;
+
+	if (info->gpio_count > MAX_BANK * BANK_SZ) {
+		dev_err(dev, "Max support %d pins now\n", MAX_BANK * BANK_SZ);
+		return -EINVAL;
+	}
+
+	//info->chip_type = PCA_CHIP_TYPE(driver_data);
+	info->chip_type = PI4IOE5V6408_TYPE;
+	if (info->chip_type != PI4IOE5V6408_TYPE) {
+		dev_err(dev, "Only support PI4IOE5V6408 chip type now.\n");
+		return -EINVAL;
+	}
+
+	info->bank_count = DIV_ROUND_UP(info->gpio_count, BANK_SZ);
+
+	ret = PI4IOE5V6408_read_regs(dev, PI4IOE5V6408_OUTPUT, info->reg_output);
+/*
+	if (ret) {
+		dev_err(dev, "Error reading output register\n");
+		return ret;
+	}
+*/
+	ret = PI4IOE5V6408_read_regs(dev, PI4IOE5V6408_DIRECTION, info->reg_direction);
+/*
+	if (ret) {
+		dev_err(dev, "Error reading direction register\n");
+		return ret;
+	}
+*/
+#if 0
+	tmp = dev_read_prop(dev, "label", &size);
+
+	if (tmp) {
+		memcpy(label, tmp, sizeof(label) - 1);
+		label[sizeof(label) - 1] = '\0';
+		snprintf(name, sizeof(name), "%s@%x_", label, info->addr);
+	} else {
+		snprintf(name, sizeof(name), "gpio@%x_", info->addr);
+	}
+
+	str = strdup(name);
+	if (!str)
+		return -ENOMEM;
+	uc_priv->bank_name = str;
+	uc_priv->gpio_count = info->gpio_count;
+
+	dev_dbg(dev, "%s is ready\n", str);
+#endif
+	return 0;
+}
+
+
+#ifdef CONFIG_DM_PI4IOE5V6408
+#if CONFIG_IS_ENABLED(DM_I2C)
+extern struct udevice *i2c_expander_dev;
+static struct udevice *i2c_cur_bus;
+
+static int cmd_i2c_set_bus_num(unsigned int busnum)
+{
+	struct udevice *bus;
+	int ret;
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, busnum, &bus);
+	if (ret) {
+		debug("%s: No bus %d\n", __func__, busnum);
+		return ret;
+	}
+	i2c_cur_bus = bus;
+
+	return 0;
+}
+
+static int i2c_get_cur_bus(struct udevice **busp)
+{
+#ifdef CONFIG_I2C_SET_DEFAULT_BUS_NUM
+	if (!i2c_cur_bus) {
+		if (cmd_i2c_set_bus_num(CONFIG_I2C_DEFAULT_BUS_NUMBER)) {
+			printf("Default I2C bus %d not found\n",
+			       CONFIG_I2C_DEFAULT_BUS_NUMBER);
+			return -ENODEV;
+		}
+	}
+#endif
+
+	if (!i2c_cur_bus) {
+		puts("No I2C bus selected\n");
+		return -ENODEV;
+	}
+	*busp = i2c_cur_bus;
+
+	return 0;
+}
+
+static int i2c_get_cur_bus_chip(uint chip_addr, struct udevice **devp)
+{
+	struct udevice *bus;
+	int ret;
+
+	ret = i2c_get_cur_bus(&bus);
+	if (ret)
+		return ret;
+
+	return i2c_get_chip(bus, chip_addr, 1, devp);
+}
+
+int init_i2c_dev(u32 i2c_bus, u32 i2c_addr, int alen)
+{
+	int ret;
+
+	ret = cmd_i2c_set_bus_num(i2c_bus);
+	if(ret){
+		printf("failed: i2c bus 0x%x can't be set\n", i2c_bus);
+		return -1;
+	}
+
+	ret = i2c_get_cur_bus_chip(i2c_addr, &i2c_expander_dev);
+	if(ret){
+		printf("failed: i2c bus 0x%x, i2c addr 0x%x can't be get. \n", i2c_bus, i2c_addr);
+		return -1;
+	}
+
+	ret = i2c_set_chip_offset_len(i2c_expander_dev, alen);
+	if(ret){
+		printf("failed: i2c bus 0x%x, i2c addr 0x%x, dev addr len 0x%x can't be set. \n", i2c_bus, i2c_addr, alen);
+		return -1;
+	}
+	return 0;
+}
+
+int octopus_i2c_control_pcie(void)
+{
+	int i;
+	u8 mem[0x10];
+	u32 *mem_u32 = (u32 *)mem;
+	u32 offset_byte_addr = 0x1a0;
+	u32 byte_len = 0x10;
+
+	struct udevice *bus;
+	int ret;
+
+	u32 i2c_bus = 0x3;
+	u32 i2c_addr = 0x51;	/*addr[7:1] = 0x51 = 1010 001x */
+	int alen = 2;		/*offset address lengh is only 2 byte.*/
+
+	init_i2c_dev(i2c_bus, i2c_addr, alen);
+
+	dm_i2c_read(i2c_expander_dev, offset_byte_addr, mem, byte_len);
+
+	for (i = 0; i < byte_len/4 ; i++)
+		printf("0x%8x ", mem_u32[i]);
+	printf("\n");
+
+	mem_u32[0] = 0xaaaa5555;
+	mem_u32[1] = 0x12345678;
+	mem_u32[2] = 0x0;
+	mem_u32[3] = 0xffff0000 ;
+	dm_i2c_write(i2c_expander_dev, offset_byte_addr, mem, byte_len);
+	mdelay(3);
+
+	mem_u32[0] = 0x0;
+	mem_u32[1] = 0x0;
+	mem_u32[2] = 0x0;
+	mem_u32[3] = 0x0;
+	dm_i2c_read(i2c_expander_dev, offset_byte_addr, mem, byte_len);
+	printf("\n");
+	for (i = 0; i < byte_len/4 ; i++)
+		printf("0x%8x ", mem_u32[i]);
+	printf("\n");
+
+	/*
+	manufactor 1000
+	i2c addr:
+	0: 011
+	1: 100
+
+	pcie_A:addr pin = 0: 1000 011x = 0x43
+	pcie_B:addr pin = 1: 1000 100x = 0x44
+	*/
+	i2c_addr = 0x44;
+	alen = 1;
+
+	init_i2c_dev(i2c_bus, i2c_addr, alen);
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, i2c_bus, &bus);
+	if (ret) {
+		printf("Invalid bus %d: err=%d\n", i2c_bus, ret);
+		return -1;
+	}
+
+	//PI4IOE5V6408_probe(bus);
+	PI4IOE5V6408_probe(i2c_expander_dev);
+	return 0;
+}
+#endif
+#endif
+
+//wyl
+#if 0
+/*
+#define OF_953X(__nrgpio, __int) (ulong)(__nrgpio | PI4IOE5V6408_TYPE | __int)
+#define OF_957X(__nrgpio, __int) (ulong)(__nrgpio | PCA957X_TYPE | __int)
+*/
+static const struct udevice_id PI4IOE5V6408_ids[] = {
+	{ .compatible = "pericom,PI4IOE5V6408", },
+	{ }
+};
+
+U_BOOT_DRIVER(PI4IOE5V6408) = {
+	.name		= "PI4IOE5V6408",
+	.id		= UCLASS_I2C,
+	.ops		= &PI4IOE5V6408_ops,
+	.probe		= PI4IOE5V6408_probe,
+	.plat_auto	= sizeof(struct PI4IOE5V6408_info),
+	.of_match	= PI4IOE5V6408_ids,
+};
+//wyl
+#endif
\ No newline at end of file
diff --git a/include/pi4ioe5v6408_gpio.h b/include/pi4ioe5v6408_gpio.h
new file mode 100644
--- /dev/null
+++ b/include/pi4ioe5v6408_gpio.h
@@ -0,0 +1,28 @@
+#ifndef _PI4IOE5V6408_GPIO_H
+#define _PI4IOE5V6408_GPIO_H
+
+#ifdef CONFIG_DM_PI4IOE5V6408
+u8 i2c_expander_reg01h_rst_int_status_rd(void);
+u8 i2c_expander_reg01h_manu_id_rd(void);
+u8 i2c_expander_reg01h_fw_ver_rd(void);
+int i2c_expander_reg01h_sft_rst_wr(void);
+
+int i2c_expander_reg03h_io_dir_rd(u8 *pmem);
+int i2c_expander_reg03h_io_dir_wr(u8 mem);
+int i2c_expander_reg05h_output_value_rd(u8 *pmem);
+int i2c_expander_reg05h_output_value_wr(u8 mem);
+int i2c_expander_reg07h_high_impedance_rd(u8 *pmem);
+int i2c_expander_reg07h_high_impedance_wr(u8 mem);
+int i2c_expander_reg09h_input_default_state_rd(u8 *pmem);
+int i2c_expander_reg09h_input_default_state_wr(u8 mem);
+int i2c_expander_reg0bh_pull_up_down_en_rd(u8 *pmem);
+int i2c_expander_reg0bh_pull_up_down_en_wr(u8 mem);
+int i2c_expander_reg0dh_pull_up_down_sel_rd(u8 *pmem);
+int i2c_expander_reg0dh_pull_up_down_sel_wr(u8 mem);
+int i2c_expander_reg0fh_gpio_input_val_rd(u8 *pmem);
+int i2c_expander_reg11h_irq_mask_val_rd(u8 *pmem);
+int i2c_expander_reg11h_irq_mask_val_wr(u8 mem);
+int i2c_expander_reg13h_irq_status_val_rd(u8 *pmem);
+#endif
+
+#endif
\ No newline at end of file
