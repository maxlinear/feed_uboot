# HG changeset patch
# Parent  81f2116b27e8fb9da1f4bf772a274ad72a3a1f55

diff --git a/drivers/usb/host/xhci-dwc3-mxl.c b/drivers/usb/host/xhci-dwc3-mxl.c
new file mode 100644
--- /dev/null
+++ b/drivers/usb/host/xhci-dwc3-mxl.c
@@ -0,0 +1,362 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2015 Freescale Semiconductor, Inc.
+ *
+ * DWC3 controller driver
+ *
+ * Author: Ramneek Mehresh<ramneek.mehresh@freescale.com>
+ */
+
+#include <clk.h>
+#include <common.h>
+#include <dm.h>
+#include <generic-phy.h>
+#include <log.h>
+#include <reset.h>
+#include <usb.h>
+#include <dwc3-uboot.h>
+#include <linux/delay.h>
+#include <usb/xhci.h>
+#include <asm/io.h>
+#include <asm/arch/rcu.h>
+#include <linux/usb/dwc3.h>
+#include <linux/usb/otg.h>
+#include <asm/arch/dwc_usb31.h>
+#include <asm/arch/lgm_usb_tca_apb.h>
+#include <asm/arch/reg.h>
+#include <asm-generic/gpio.h>
+
+struct xhci_dwc3_plat {
+	struct clk_bulk clks;
+	struct phy_bulk phys;
+	struct reset_ctl_bulk resets;
+};
+
+void dwc3_set_mode(struct dwc3 *dwc3_reg, u32 mode)
+{
+	clrsetbits_le32(&dwc3_reg->g_ctl,
+			DWC3_GCTL_PRTCAPDIR(DWC3_GCTL_PRTCAP_OTG),
+			DWC3_GCTL_PRTCAPDIR(mode));
+}
+
+static void dwc3_phy_reset(struct dwc3 *dwc3_reg)
+{
+	/* Assert USB3 PHY reset */
+	setbits_le32(&dwc3_reg->g_usb3pipectl[0], DWC3_GUSB3PIPECTL_PHYSOFTRST);
+	/* Assert USB2 PHY reset */
+	setbits_le32(&dwc3_reg->g_usb2phycfg, DWC3_GUSB2PHYCFG_PHYSOFTRST);
+	mdelay(100);
+	/* Clear USB3 PHY reset */
+	clrbits_le32(&dwc3_reg->g_usb3pipectl[0], DWC3_GUSB3PIPECTL_PHYSOFTRST);
+	/* Clear USB2 PHY reset */
+	clrbits_le32(&dwc3_reg->g_usb2phycfg, DWC3_GUSB2PHYCFG_PHYSOFTRST);
+}
+
+void dwc3_core_soft_reset(struct dwc3 *dwc3_reg)
+{
+	/* Before Resetting PHY, put Core in Reset */
+	setbits_le32(&dwc3_reg->g_ctl, DWC3_GCTL_CORESOFTRESET);
+	/* reset USB3 phy - if required */
+	dwc3_phy_reset(dwc3_reg);
+	mdelay(100);
+	/* After PHYs are stable we can take Core out of reset state */
+	clrbits_le32(&dwc3_reg->g_ctl, DWC3_GCTL_CORESOFTRESET);
+}
+
+int dwc3_core_init(struct dwc3 *dwc3_reg)
+{
+	u32 reg;
+	u32 revision;
+	unsigned int dwc3_hwparams1;
+
+	revision = readl(&dwc3_reg->g_snpsid);
+	/* This should read as U3 followed by revision number */
+	if ((revision & DWC3_GSNPSID_MASK) != 0x55330000 &&
+	    (revision & DWC3_GSNPSID_MASK) != 0x33310000) {
+		puts("this is not a DesignWare USB3 DRD Core\n");
+		return -1;
+	}
+	dwc3_core_soft_reset(dwc3_reg);
+	dwc3_hwparams1 = readl(&dwc3_reg->g_hwparams1);
+	reg = readl(&dwc3_reg->g_ctl);
+	reg &= ~DWC3_GCTL_SCALEDOWN_MASK;
+	reg &= ~DWC3_GCTL_DISSCRAMBLE;
+	switch (DWC3_GHWPARAMS1_EN_PWROPT(dwc3_hwparams1)) {
+	case DWC3_GHWPARAMS1_EN_PWROPT_CLK:
+		reg &= ~DWC3_GCTL_DSBLCLKGTNG;
+		break;
+	default:
+		debug("No power optimization available\n");
+	}
+
+	/*
+	 * WORKAROUND: DWC3 revisions <1.90a have a bug
+	 * where the device can fail to connect at SuperSpeed
+	 * and falls back to high-speed mode which causes
+	 * the device to enter a Connect/Disconnect loop
+	 */
+	if ((revision & DWC3_REVISION_MASK) < 0x190a)
+		reg |= DWC3_GCTL_U2RSTECN;
+
+	writel(reg, &dwc3_reg->g_ctl);
+	return 0;
+}
+
+void dwc3_set_fladj(struct dwc3 *dwc3_reg, u32 val)
+{
+	setbits_le32(&dwc3_reg->g_fladj, GFLADJ_30MHZ_REG_SEL |
+			GFLADJ_30MHZ(val));
+}
+
+#if CONFIG_IS_ENABLED(DM_USB)
+static int xhci_dwc3_reset_init(struct udevice *dev,
+				struct xhci_dwc3_plat *plat)
+{
+	int ret;
+	ret = reset_get_bulk(dev, &plat->resets);
+	if (ret == -ENOTSUPP || ret == -ENOENT){
+		return 0;}
+	else if (ret){
+		return ret;}
+	ret = reset_deassert_bulk(&plat->resets);
+	if (ret) {
+		reset_release_bulk(&plat->resets);
+		return ret;
+	}
+	return 0;
+}
+
+static int xhci_dwc3_clk_init(struct udevice *dev,
+			      struct xhci_dwc3_plat *plat)
+{
+	int ret;
+
+	ret = clk_get_bulk(dev, &plat->clks);
+	if (ret == -ENOSYS || ret == -ENOENT)
+		return 0;
+	if (ret)
+		return ret;
+
+	ret = clk_enable_bulk(&plat->clks);
+	if (ret) {
+		clk_release_bulk(&plat->clks);
+		return ret;
+	}
+	return 0;
+}
+
+static void usb_ctl_phy_settings(u32 ctl_base, u32 phy_base)
+{
+	int rd = REG32(phy_base + USB_PHY_CTRL1_REG);
+	u32 timeout = 0xFFFFF;
+
+	while ((rd & 0x04000000) == 0) {
+		if (timeout-- <= 0) {
+			printf("timeout waiting for USB PHY ready\n");
+			return;
+		}
+		rd = REG32(phy_base + USB_PHY_CTRL1_REG);
+	}
+
+	REG32(phy_base + USB_PHY_CTRL1_REG) |= (1<<25);
+	REG32(phy_base + TCA_INTR_EN) = 0x03;
+	REG32(phy_base + TCA_INTR_ST) = 0xFFFF;
+	REG32(phy_base + TCA_TCPC) = 0x11;
+	printf("\nEnabling SSC for MPLLA");
+	REG32(phy_base + USB_PLL_REG) &= ~(1<<1);
+	REG32(phy_base + USB_PHY_CTRL2_REG) = (0x600<<16);
+	REG32(phy_base + USB_PHY_CTRL3_REG) = 10;
+	REG32(phy_base + USB_PLL_REG) |= (1<<1);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GCTL) = 0x27111004;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GFLADJ) = 0x0C800020;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUCTL)  = 0x0C814802;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUCTL1) |= (1<<30);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) &= ~(1<<17);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) |= (1<<28);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB2PHYCFG) |= 7 ;
+	REG32(ctl_base + DWC_USB31_BLOCK_HOST_CNTRL_PORT_REG_SET_PORTPMSC_30) = 0xFFFF;
+	REG32(ctl_base + 0x0420) |= (7<<25);
+	REG32(ctl_base + 0x0430) |= (7<<25);
+}
+
+static int usb_get_gpio(struct udevice *dev)
+{
+	int pwr_gpio, err;
+	struct gpio_desc desc;
+
+	if (CONFIG_IS_ENABLED(DM_GPIO)) {
+		err = gpio_request_by_name(dev, "pwr-gpios", 0,
+					  &desc, GPIOD_IS_OUT);
+		/* it's optional so only bail if we get a real error */
+		if (err && (err != -ENOENT)) {
+			debug("get pwr gpio failed.\n");
+			return err;
+		} else {
+			pwr_gpio = desc.offset;
+		}
+	} else {
+		err = dev_read_u32_index(dev, "pwr-gpios", 1, &pwr_gpio);
+		if (err < 0) {
+			debug("get pwr gpio failed.\n");
+			return err;
+		}
+	}
+
+	return pwr_gpio;
+}
+
+/********************************************/
+/* USB TEST       						*/
+/* host = 0 (USB-A), 1 (USB-B)				*/
+/* port = 0 (usb2) , 1 (usb3)				*/
+/********************************************/
+
+static void usb_power(struct udevice *dev, u32 on, int pwr_gpio)
+{
+	debug("usb power gpio pin: %d\n", pwr_gpio);
+	gpio_direction_output(pwr_gpio, GPIOD_IS_OUT);
+
+	if (on == 0) {
+		gpio_set_value(pwr_gpio, 1);
+		debug("Power off Vbus, gpio %d \n",pwr_gpio);
+		mdelay(1000);
+	}
+
+	if (on == 1) {
+		gpio_set_value(pwr_gpio, 0);
+		debug("Power on Vbus, gpio %d \n",pwr_gpio);
+		mdelay(0xc00);
+	}
+}
+
+void usb_reset(u32 ctl_base, u32 phy_base)
+{
+	REG32(ctl_base +  DWC_USB31_BLOCK_GBL_GUSB2PHYCFG) |= (1 << 31);
+	REG32(ctl_base +  DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) |= (1 << 31);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GCTL) |= (1 << 11);
+	mdelay(100);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) &= ~(1 << 31);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB2PHYCFG) &= ~(1 << 31);
+	mdelay(100);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GCTL) &= ~(1 << 11);
+	REG32(phy_base + TCA_INTR_EN) = 0x03;
+	REG32(phy_base + TCA_INTR_ST) = 0xFFFF;
+	REG32(phy_base + TCA_TCPC) = 0x11;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GCTL) = 0x27111004;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GFLADJ) = 0x0C800020;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUCTL) = 0x0C814802;
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUCTL1) |= (1 << 30);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) &= ~(1 << 17);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB3PIPECTL) |= ( 1<< 28);
+	REG32(ctl_base + DWC_USB31_BLOCK_GBL_GUSB2PHYCFG) |= 7 ;
+	REG32(ctl_base +
+		DWC_USB31_BLOCK_HOST_CNTRL_PORT_REG_SET_PORTPMSC_30) = 0xFFFF;
+	REG32(ctl_base + 0x0420) |= (7 << 25);
+	REG32(ctl_base + 0x0430) |= (7 << 25);
+
+}
+
+void usb_connect_status(u32 ctl_base)
+{
+	printf("\n[Host:usb2] PORTSC_20 = %08x", REG32(ctl_base + 0x420));
+	printf("\n[Host:usb3] PORTSC_30 = %08x", REG32(ctl_base + 0x430));
+	printf("\n");
+}
+
+static int xhci_dwc3_probe(struct udevice *dev)
+{
+	int ret;
+	int power_gpio;
+	u32 reg;
+	u32 *ctl_base_pr;
+	u32 *phy_base_pr;
+	struct xhci_hcor *hcor;
+	struct xhci_hccr *hccr;
+	struct dwc3 *dwc3_reg;
+	enum usb_dr_mode dr_mode;
+	struct xhci_dwc3_plat *plat = dev_get_plat(dev);
+	const char *phy;
+
+	xhci_writel((uint32_t volatile *)RCU_RST_REQ_ETHNOC,0x0);
+	xhci_writel((uint32_t volatile *)RCU_RST_REQ_PPNOC,0x0);
+
+	power_gpio = usb_get_gpio(dev);
+
+	ctl_base_pr = dev_remap_addr_index(dev, 0);
+	phy_base_pr = dev_remap_addr_index(dev, 1);
+
+	usb_ctl_phy_settings((u32)ctl_base_pr, (u32)phy_base_pr);
+
+	usb_power(dev, 0, power_gpio);
+	usb_reset((u32)ctl_base_pr, (u32)phy_base_pr);
+	usb_power(dev, 1, power_gpio);
+	usb_connect_status((u32)ctl_base_pr);
+
+	ret = xhci_dwc3_reset_init(dev, plat);
+	if (ret){
+		return ret;}
+	ret = xhci_dwc3_clk_init(dev, plat);
+	if (ret){
+		return ret;}
+	hccr = (struct xhci_hccr *)((uintptr_t)dev_remap_addr(dev));
+	hcor = (struct xhci_hcor *)((uintptr_t)hccr +
+			HC_LENGTH(xhci_readl(&(hccr)->cr_capbase)));
+
+	ret = dwc3_setup_phy(dev, &plat->phys);
+	if (ret && (ret != -ENOTSUPP)){
+		return ret;}
+	dwc3_reg = (struct dwc3 *)((char *)(hccr) + DWC3_REG_OFFSET);
+	dwc3_core_init(dwc3_reg);
+	/* Set dwc3 usb2 phy config */
+	reg = readl(&dwc3_reg->g_usb2phycfg[0]);
+	phy = dev_read_string(dev, "phy_type");
+	if (phy && strcmp(phy, "utmi_wide") == 0) {
+		reg |= DWC3_GUSB2PHYCFG_PHYIF;
+		reg &= ~DWC3_GUSB2PHYCFG_USBTRDTIM_MASK;
+		reg |= DWC3_GUSB2PHYCFG_USBTRDTIM_16BIT;
+	}
+	if (dev_read_bool(dev, "snps,dis_enblslpm-quirk")){
+		reg &= ~DWC3_GUSB2PHYCFG_ENBLSLPM;}
+
+	if (dev_read_bool(dev, "snps,dis-u2-freeclk-exists-quirk")){
+		reg &= ~DWC3_GUSB2PHYCFG_U2_FREECLK_EXISTS;}
+
+	if (dev_read_bool(dev, "snps,dis_u2_susphy_quirk")){
+		reg &= ~DWC3_GUSB2PHYCFG_SUSPHY;}
+
+	writel(reg, &dwc3_reg->g_usb2phycfg[0]);
+	dr_mode = usb_get_dr_mode(dev_ofnode(dev));
+	if (dr_mode == USB_DR_MODE_UNKNOWN){
+		/* by default set dual role mode to HOST */
+		dr_mode = USB_DR_MODE_HOST;}
+
+	dwc3_set_mode(dwc3_reg, dr_mode);
+	return xhci_register(dev, hccr, hcor);
+}
+
+static int xhci_dwc3_remove(struct udevice *dev)
+{
+	struct xhci_dwc3_plat *plat = dev_get_plat(dev);
+	dwc3_shutdown_phy(dev, &plat->phys);
+	clk_release_bulk(&plat->clks);
+	reset_release_bulk(&plat->resets);
+	return xhci_deregister(dev);
+}
+
+static const struct udevice_id xhci_dwc3_ids[] = {
+	{ .compatible = "mxl,dwc3" },
+	{ }
+};
+
+U_BOOT_DRIVER(xhci_dwc3) = {
+	.name = "xhci-dwc3",
+	.id = UCLASS_USB,
+	.of_match = xhci_dwc3_ids,
+	.probe = xhci_dwc3_probe,
+	.remove = xhci_dwc3_remove,
+	.ops = &xhci_usb_ops,
+	.priv_auto	= sizeof(struct xhci_ctrl),
+	.plat_auto	= sizeof(struct xhci_dwc3_plat),
+	.flags = DM_FLAG_ALLOC_PRIV_DMA,
+};
+#endif
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -1000,6 +1000,7 @@ static int xhci_submit_root(struct usb_d
 				tmpbuf[1] |= USB_PORT_STAT_HIGH_SPEED >> 8;
 				break;
 			case XDEV_SS:
+			case XDEV_SS_PLUS:
 				debug("SPEED = SUPERSPEED\n");
 				tmpbuf[1] |= USB_PORT_STAT_SUPER_SPEED >> 8;
 				break;
diff --git a/include/usb/xhci.h b/include/usb/xhci.h
--- a/include/usb/xhci.h
+++ b/include/usb/xhci.h
@@ -286,16 +286,19 @@ struct xhci_hcor {
 #define	XDEV_LS			(0x2 << 10)
 #define	XDEV_HS			(0x3 << 10)
 #define	XDEV_SS			(0x4 << 10)
+#define	XDEV_SS_PLUS		(0x5 << 10)
 #define DEV_UNDEFSPEED(p)	(((p) & DEV_SPEED_MASK) == (0x0<<10))
 #define DEV_FULLSPEED(p)	(((p) & DEV_SPEED_MASK) == XDEV_FS)
 #define DEV_LOWSPEED(p)		(((p) & DEV_SPEED_MASK) == XDEV_LS)
 #define DEV_HIGHSPEED(p)	(((p) & DEV_SPEED_MASK) == XDEV_HS)
 #define DEV_SUPERSPEED(p)	(((p) & DEV_SPEED_MASK) == XDEV_SS)
+#define DEV_SUPERSPEED_PLUS(p)	(((p) & DEV_SPEED_MASK) == XDEV_SS_PLUS)
 /* Bits 20:23 in the Slot Context are the speed for the device */
 #define	SLOT_SPEED_FS		(XDEV_FS << 10)
 #define	SLOT_SPEED_LS		(XDEV_LS << 10)
 #define	SLOT_SPEED_HS		(XDEV_HS << 10)
 #define	SLOT_SPEED_SS		(XDEV_SS << 10)
+#define	SLOT_SPEED_SS_PLUS	(XDEV_SS_PLUS << 10)
 /* Port Indicator Control */
 #define PORT_LED_OFF	(0 << 14)
 #define PORT_LED_AMBER	(1 << 14)
