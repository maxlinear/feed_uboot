# HG changeset patch
# Parent  e4b112e80003b2605a3cfbf2711927b97287d78e

diff --git a/env/common.c b/env/common.c
--- a/env/common.c
+++ b/env/common.c
@@ -23,6 +23,10 @@
 #include <dm/ofnode.h>
 #include <net.h>
 #include <watchdog.h>
+#if defined(CONFIG_SB_ENV_PROTECTION)
+#include <asm/sections.h>
+#include <linux/libfdt.h>
+#endif /* defined(CONFIG_SB_ENV_PROTECTION) */
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -310,9 +314,38 @@ int env_import(const char *buf, int chec
 	if (himport_r(&env_htab, (char *)ep->data, ENV_SIZE, '\0', flags, 0,
 			0, NULL)) {
 		gd->flags |= GD_FLG_ENV_READY;
+#if !defined(CONFIG_SB_ENV_PROTECTION) || defined(CONFIG_SPL_BUILD)
+		return 0;
+#endif /* CONFIG_SB_ENV_PROTECTION */
+	}
+
+#if defined(CONFIG_SB_ENV_PROTECTION) && !defined(CONFIG_SPL_BUILD)
+	/* LGM : */
+	struct fdt_header * fdt = (struct fdt_header *)((ulong)_end - gd->reloc_off);
+	u32 fdt_size = fdt_totalsize(fdt);
+	u32 dtb_end = (ulong)_end - gd->reloc_off + fdt_size;
+	uint32_t crc;
+
+	rbe_debug_print("\n[env_import] ep %p\n", ep);
+	ep = (env_t *)(dtb_end + ((0x20 - (dtb_end % 0x20)) % 0x20));
+	rbe_debug_print("[env_import protection] ep %p\n", ep);
+
+	memcpy(&crc, &ep->crc, sizeof(crc));
+
+	if (crc32(0, ep->data, ENV_SIZE) != crc) {
+		env_set_default("bad protection CRC", 0);
+		return -ENOMSG;
+	}
+
+	flags = H_NOCLEAR | H_EXTERNAL;
+	if (himport_r(&env_htab, (char *)ep->data, ENV_SIZE, '\0', flags, 0, 0, NULL)) {
+		gd->flags |= GD_FLG_ENV_READY;
+		rbe_debug_print("[env_import protection] import sb env\n");
 		return 0;
 	}
 
+	rbe_debug_print("[env_import protection] import sb env fail\n");
+#endif /* CONFIG_SB_ENV_PROTECTION */
 	pr_err("Cannot import environment: errno = %d\n", errno);
 
 	env_set_default("import failed", 0);
@@ -320,6 +353,34 @@ int env_import(const char *buf, int chec
 	return -EIO;
 }
 
+#ifdef CONFIG_VENDOR_MAXLINEAR
+/* import with flag , need it so it wont clear the whole env */
+int env_import_ext(const char *buf, int check, int flag)
+{
+	env_t *ep = (env_t *)buf;
+
+	if (check) {
+		uint32_t crc;
+
+		memcpy(&crc, &ep->crc, sizeof(crc));
+
+		if (crc32(0, ep->data, ENV_SIZE) != crc) {
+			return 0;
+		}
+	}
+
+	if (himport_r(&env_htab, (char *)ep->data, ENV_SIZE, '\0', flag, 0,
+			0, NULL)) {
+		gd->flags |= GD_FLG_ENV_READY;
+		return 1;
+	}
+
+	pr_err("Cannot import environment: errno = %d\n", errno);
+
+	return 0;
+}
+#endif /* CONFIG_VENDOR_MAXLINEAR */
+
 #ifdef CONFIG_SYS_REDUNDAND_ENVIRONMENT
 static unsigned char env_flags;
 
diff --git a/include/env.h b/include/env.h
--- a/include/env.h
+++ b/include/env.h
@@ -298,6 +298,10 @@ int env_select(const char *name);
  */
 int env_import(const char *buf, int check, int flags);
 
+#ifdef CONFIG_VENDOR_MAXLINEAR
+int env_import_ext(const char *buf, int check, int flag);
+#endif
+
 /**
  * env_export() - Export the environment to a buffer
  *
diff --git a/tools/envcrc.c b/tools/envcrc.c
--- a/tools/envcrc.c
+++ b/tools/envcrc.c
@@ -119,7 +119,41 @@ int main (int argc, char **argv)
 		printf ("0x%08X\n", crc);
 	}
 #else
-	printf ("0\n");
+	uint32_t crc;
+	unsigned int filesize = 0, i;
+	unsigned char buf[ENV_SIZE];
+	size_t count = 0;
+	FILE *fp;
+
+	fp = fopen (argv[1], "rb");
+	if (fp == NULL)
+		return -1;
+
+	fseek(fp, 0, SEEK_END);
+	filesize = ftell(fp);
+	fseek(fp, 0, SEEK_SET);
+
+	for (i = 0; i < ENV_SIZE; i++) {
+		buf[i] = 0;
+	}
+
+	count = fread(buf, filesize, 1, fp );
+
+	fclose(fp);
+
+	if (!count)
+		return EXIT_FAILURE;
+
+	crc = crc32(0, buf, ENV_SIZE);
+
+#ifdef CONFIG_VENDOR_MAXLINEAR
+	/* LE RAW byte */
+	unsigned char *pbyte = (unsigned char *)&crc;
+	printf("%02x%02x%02x%02x\n", pbyte[0], pbyte[1], pbyte[2], pbyte[3]);
+#else
+	printf ("0x%08X\n", crc);
+#endif /*CONFIG_VENDOR_MAXLINEAR */
+
 #endif
 	return EXIT_SUCCESS;
 }
