# HG changeset patch
# Parent  a6dfc1dd3e9534123eb96207c4474c65be4da0f3

diff --git a/drivers/i2c/muxes/pca954x.c b/drivers/i2c/muxes/pca954x.c
--- a/drivers/i2c/muxes/pca954x.c
+++ b/drivers/i2c/muxes/pca954x.c
@@ -12,7 +12,7 @@
 #include <log.h>
 #include <malloc.h>
 #include <asm/global_data.h>
-
+#include <dm/of_access.h>
 #include <asm-generic/gpio.h>
 
 DECLARE_GLOBAL_DATA_PTR;
@@ -39,6 +39,7 @@ struct pca954x_priv {
 	u32 addr; /* I2C mux address */
 	u32 width; /* I2C mux width - number of busses */
 	struct gpio_desc gpio_mux_reset;
+	int gpio_reset; /* reset pin associated with the device */
 };
 
 static const struct chip_desc chips[] = {
@@ -76,6 +77,7 @@ static int pca954x_deselect(struct udevi
 	struct pca954x_priv *priv = dev_get_priv(mux);
 	uchar byte = 0;
 
+	debug("%s de-selecting byte %04x\n", __func__, byte);
 	return dm_i2c_write(mux, priv->addr, &byte, 1);
 }
 
@@ -91,6 +93,7 @@ static int pca954x_select(struct udevice
 	else
 		byte = 1 << channel;
 
+	debug("%s selecting byte %04x\n", __func__, byte);
 	return dm_i2c_write(mux, priv->addr, &byte, 1);
 }
 
@@ -134,9 +137,10 @@ static int pca954x_of_to_plat(struct ude
 
 static int pca954x_probe(struct udevice *dev)
 {
+	int err;
+	struct pca954x_priv *priv = dev_get_priv(dev);
+
 	if (CONFIG_IS_ENABLED(DM_GPIO)) {
-		struct pca954x_priv *priv = dev_get_priv(dev);
-		int err;
 
 		err = gpio_request_by_name(dev, "reset-gpios", 0,
 				&priv->gpio_mux_reset, GPIOD_IS_OUT);
@@ -148,6 +152,18 @@ static int pca954x_probe(struct udevice 
 		/* dm will take care of polarity */
 		if (dm_gpio_is_valid(&priv->gpio_mux_reset))
 			dm_gpio_set_value(&priv->gpio_mux_reset, 0);
+	} else {
+		ofnode node;
+		u32 gpio;
+
+		node = dev_ofnode(dev);
+		ofnode_read_u32_index(node, "reset-gpios", 1, &gpio);
+		if (gpio < 0)
+			return -EINVAL;
+
+		priv->gpio_reset = gpio;
+		debug("gpio reset pin: %d\n", priv->gpio_reset);
+		gpio_direction_output(priv->gpio_reset, 1);
 	}
 
 	return 0;
