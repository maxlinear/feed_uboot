# HG changeset patch
# Parent  12e8c6f81473635957fbc9982a6eb7c2e72fbb28

diff --git a/drivers/misc/sso_lgm.c b/drivers/misc/sso_lgm.c
new file mode 100644
--- /dev/null
+++ b/drivers/misc/sso_lgm.c
@@ -0,0 +1,213 @@
+/* Copyright (c) 2021, Maxlinear, Inc.
+ *
+ * SSO driver to control the LED output in LGM
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ */
+
+#include <common.h>
+#include <sso.h>
+#include <lgm_gpio.h>
+#include <asm/arch/project.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+
+u32 SSIO_MODULE_BASE;
+u32 CGU_CLKGCR1_A_LEDC_MASK;
+
+void init_gptc(void)
+{
+	int count = 10000;
+
+	writel(0x010100, GPT0_MODULE_BASE + GPT_CLC);
+	/* 8KHz settings 200M/25000 = 8KHz */
+	writel(25000 - 1, GPT0_MODULE_BASE + GPT_RELOAD_2_A);
+	writel(0x00, GPT0_MODULE_BASE + GPT_CON_2_A);
+	writel(GPT_RUN_2_A_RL_MASK | GPT_RUN_2_A_SEN_MASK,
+		GPT0_MODULE_BASE + GPT_RUN_2_A);
+
+	while ((readl(GPT0_MODULE_BASE + GPT_CON_2_A) & 1) == 0) {
+		count--;
+		if (count <= 0) {
+			printf("timeout initializing gptc\n");
+			break;
+		}
+	}
+}
+
+int sso_group_config(int max_pins)
+{
+	switch (max_pins) {
+	case 8:
+		return 0x1;
+	case 16:
+		return 0x3;
+	case 24:
+		return 0x7;
+	case 32:
+		return 0xf;
+	default:
+		break;
+	}
+	return -1;
+}
+
+void sso_init(int sso_no)
+{
+	int i, grp_pins;
+
+	init_gptc();
+
+	writel(readl(CGU_MODULE_BASE + CGU_CLKGCR1_A)
+		& (~(CGU_CLKGCR1_A_LEDC0_MASK
+		| CGU_CLKGCR1_A_LEDC1_MASK)), CGU_MODULE_BASE + CGU_CLKGCR1_A);
+
+#ifdef CONFIG_SERIAL_SHIFT_LGM_ENABLE_PIN
+  #ifdef CONFIG_DM_GPIO
+	gpio_request(CONFIG_SERIAL_SHIFT_ENABLE_PIN_NO, "sso_enable");
+  #endif
+	gpio_direction_output(CONFIG_SERIAL_SHIFT_ENABLE_PIN_NO, 1);
+#endif
+
+	/* set pins to sso functions*/
+	if (sso_no == 0){
+		gpio_reserve_and_set(4, GPIO_OUTPUT_DIR, 0x1);	/*gpio4,led_st*/
+		gpio_reserve_and_set(5, GPIO_OUTPUT_DIR, 0x1);	/*gpio5,led_d*/
+		gpio_reserve_and_set(6, GPIO_OUTPUT_DIR, 0x1);	/*gpio6,led_sh*/
+
+		SSIO_MODULE_BASE = SERIAL_SHIFT_CONTROLLER0_MODULE_BASE;
+		CGU_CLKGCR1_A_LEDC_MASK = CGU_CLKGCR1_A_LEDC0_MASK;
+
+	} else if (sso_no == 1) {
+		gpio_reserve_and_set(23, GPIO_OUTPUT_DIR, 0x2);	/*gpio23,led_st1*/
+		gpio_reserve_and_set(32, GPIO_OUTPUT_DIR, 0x1);	/*gpio32,led_d1*/
+		gpio_reserve_and_set(7, GPIO_OUTPUT_DIR, 0x1);	/*gpio7,led_sh1*/
+
+		SSIO_MODULE_BASE = SERIAL_SHIFT_CONTROLLER1_MODULE_BASE;
+		CGU_CLKGCR1_A_LEDC_MASK = CGU_CLKGCR1_A_LEDC1_MASK;
+
+	} else {
+		printf("no such sso number: %d \n", sso_no);
+		return;
+	}
+	/* set default duty cycle */
+	for (i = 0; i < 32; i++)
+		writel(0xFF, SSIO_MODULE_BASE + (DUTY_CYCLE_0 + (i * 4)));
+
+	/* clear SSO settings */
+	for (i = 0; i < 8; i++)
+		writel(0, SSIO_MODULE_BASE + 0x2b0);
+
+	/* enable sso clk */
+	writel(readl(CGU_MODULE_BASE + CGU_CLKGCR1_A)
+		| CGU_CLKGCR1_A_LEDC_MASK, CGU_MODULE_BASE + CGU_CLKGCR1_A);
+
+	/* set SSO settings */
+	writel(SSO_CON0_RZFL_MASK, SSIO_MODULE_BASE + SSO_CON0);
+
+	grp_pins = sso_group_config(CONFIG_SSO_MAX_PINS);
+	if (grp_pins < 0)
+		printf("Undefined #pins configuration in SSO driver\n");
+
+	writel((grp_pins | (CONST_SSO_CON1_US_FPID << SSO_CON1_US_POS)
+		| (CONST_SSO_CON1_FCDSC_V1_3_2 << SSO_CON1_FCDSC_POS)
+		| (CONST_SSO_CON1_FPID_V4HZ << SSO_CON1_FPID_POS)),
+			SSIO_MODULE_BASE + SSO_CON1);
+
+	writel(0x0, SSIO_MODULE_BASE + LED_BLINK_H8_0);
+	writel(0x0, SSIO_MODULE_BASE + LED_BLINK_H8_1);
+	writel(0x0, SSIO_MODULE_BASE + SSO_AR);
+}
+
+int sso_output(int gpio, u32 value, u8 duty_cycle)
+{
+	u32 reg;
+
+	if (gpio >= 32)
+		return -EINVAL;
+
+	debug("gpio: %d, value: %08x, duty cycle: 0x%02x\n",
+		gpio, value, duty_cycle);
+
+	writel(duty_cycle, SSIO_MODULE_BASE + (DUTY_CYCLE_0 + (gpio * 4)));
+
+	reg = readl(SSIO_MODULE_BASE + SSO_CPU0);
+
+	if (value)
+		writel((reg | (1 << gpio)), SSIO_MODULE_BASE + SSO_CPU0);
+	else
+		writel((reg & ~(1 << gpio)), SSIO_MODULE_BASE + SSO_CPU0);
+
+	return 0;
+}
+
+int sso_output_all(u32 value, u8 duty_cycle)
+{
+	int i;
+
+	for (i = 0; i < 32; i++)
+		writel(duty_cycle, SSIO_MODULE_BASE + (DUTY_CYCLE_0 + (i * 4)));
+
+	writel(value, SSIO_MODULE_BASE + SSO_CPU0);
+
+	return 0;
+}
+
+int sso_get_status(int sso_pin)
+{
+	u32 reg;
+
+	if (sso_pin >= 32)
+		return -EINVAL;
+
+	reg = readl(SSIO_MODULE_BASE + SSO_CPU0);
+	/* check if SSO pin is set */
+	if ((reg & (1 << sso_pin)) != 0)
+		return 1;
+	else
+		return 0;
+}
+
+void sso_set_blink(u32 sso_pin, int freq)
+{
+	u32 reg, divider;
+
+	if (sso_pin >= 32)
+		return;
+
+	reg = readl(SSIO_MODULE_BASE + SSO_CON2);
+
+	if (freq == 0){
+		writel(reg & (~(1 << sso_pin)), SSIO_MODULE_BASE + SSO_CON2);
+		return;}
+	else
+		writel(reg | (1 << sso_pin), SSIO_MODULE_BASE + SSO_CON2);
+
+	reg = readl(SSIO_MODULE_BASE + SSO_CON1);
+	reg &= ~(SSO_CON1_FPID_MASK);
+	switch (freq) {
+	case 2:
+		divider = (CONST_SSO_CON1_FPID_V2HZ << SSO_CON1_FPID_POS);
+		break;
+	case 4:
+		divider = (CONST_SSO_CON1_FPID_V4HZ << SSO_CON1_FPID_POS);
+		break;
+	case 8:
+		divider = (CONST_SSO_CON1_FPID_V8HZ << SSO_CON1_FPID_POS);
+		break;
+	case 10:
+		divider = (CONST_SSO_CON1_FPID_V10HZ << SSO_CON1_FPID_POS);
+		break;
+	default:
+		printf("Freq. not supported, only 2HZ, 4HZ, 8HZ, 10HZ\n");
+		return;
+	}
+
+	writel(reg | divider, SSIO_MODULE_BASE + SSO_CON1);
+}
+
+void sso_sw_update(void)
+{
+	writel(readl(SSIO_MODULE_BASE + SSO_CON0) | SSO_CON0_SWU_MASK,
+		SSIO_MODULE_BASE + SSO_CON0);
+}
diff --git a/include/sso.h b/include/sso.h
new file mode 100644
--- /dev/null
+++ b/include/sso.h
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) 2018, Intel Corporation.
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+void sso_init(int sso_no);
+int sso_output(int gpio, u32 value, u8 duty_cycle);
+int sso_output_all(u32 value, u8 duty_cycle);
+int sso_get_status(int sso_pin);
+void sso_set_blink(u32 sso_pin, int freq);
+void sso_sw_update(void);
