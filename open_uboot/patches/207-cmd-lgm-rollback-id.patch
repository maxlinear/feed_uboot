# HG changeset patch
# Parent  25f8f8371dff7ac6a26a79558b0496801c787ec5

diff --git a/cmd/mxl/cmd_flexi_rbid.c b/cmd/mxl/cmd_flexi_rbid.c
new file mode 100644
--- /dev/null
+++ b/cmd/mxl/cmd_flexi_rbid.c
@@ -0,0 +1,117 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright © 2022 MaxLinear, Inc.
+ *
+ */
+#include <common.h>
+#include <command.h>
+#include <asm/secureboot.h>
+
+static char *get_component(unsigned long component_id)
+{
+	switch(component_id) {
+	case 1:
+		return "rbe";
+	case 2:
+		return "tep firmware";
+	case 3:
+		return "u-boot";
+	case 4:
+		return "kernel";
+	case 5:
+		return "rootfs";
+	default:
+		return "unknown";
+	}
+}
+
+int do_flexi_rbid_read(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	u32 ret_svn = 0;
+	u32 otp_svn = 0;
+
+	if (argc != 2)
+		return CMD_RET_USAGE;
+
+	otp_svn = simple_strtoul(argv[1], NULL, 16);
+
+	printf("Reading from component %s\n",
+		get_component(otp_svn));
+	ret_svn = chk_flexi_rbid(otp_svn);
+	printf("SVN value %d\n", ret_svn);
+
+	return 0;
+}
+
+static int do_flexi_rbid_update(struct cmd_tbl *cmdtp, int flag,
+		int argc, char * const argv[])
+{
+	u32 component;
+	u32 id_new = 0;
+	u32 old_id;
+
+	if (argc < 2)
+		return CMD_RET_USAGE;
+
+	/* get component to be updated */
+	component = simple_strtoul(argv[1], NULL, 16);
+
+	/* if SVN value is given, update using the value */
+	if (argc == 3) {
+		id_new = simple_strtoul(argv[2], NULL, 16);
+
+		if (id_new == 0)
+			return CMD_RET_USAGE;
+	}
+
+	printf("Commiting and update to component %s\n",
+		get_component(component));
+	if (id_new)
+		printf("new SVN value %08x\n", id_new);
+
+	/* read rollback ID of component */
+	old_id = chk_flexi_rbid(component);
+
+	/* check that old id < new id */
+	if ((id_new != 0) && (id_new < old_id)) {
+		printf("New rollback id %08x cannot be smaller than %08x\n",
+			id_new, old_id);
+		return 0;
+	}
+
+	/* same id, no need to check just return */
+	if ((id_new == old_id) && (0 != old_id))
+		return 0;
+
+	/* check that new id is a consecutive bit increase, retun error
+	 * otherwise
+	 */
+	/* ffz(new) - ffz(old) == 1? */
+
+	/* Update SVN using svn-value or increase old value */
+	if (id_new != 0)
+		upd_flexi_rbid(component, id_new);
+	else
+		upd_flexi_rbid(component, ++old_id);
+
+	return 0;
+
+}
+
+U_BOOT_CMD(
+	fsvn_update, CONFIG_SYS_MAXARGS, 0, do_flexi_rbid_update,
+	"Increase[update] the flexible rollback id of the different components",
+	"fsvn_update <component> [SVN value]\n"
+	"\t- component = [RBE = 1], [TEP = 2], [U-BOOT = 3]\n"
+	"\t              [KERNEL = 4], [ROOTFS = 5]\n"
+	"\t- SVN value - [optional] rollback id value\n"
+);
+
+
+U_BOOT_CMD(
+	fsvn_read, CONFIG_SYS_MAXARGS, 0, do_flexi_rbid_read,
+	"Read the flexible rollback id of the different components",
+	"fsvn_read <component>\n"
+	"\t- component = [RBE = 1], [TEP = 2], [U-BOOT = 3]\n"
+	"\t              [KERNEL = 4], [ROOTFS = 5]\n"
+);
diff --git a/cmd/mxl/cmd_rollbackid.c b/cmd/mxl/cmd_rollbackid.c
new file mode 100644
--- /dev/null
+++ b/cmd/mxl/cmd_rollbackid.c
@@ -0,0 +1,117 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright © 2022 MaxLinear, Inc.
+ *
+ */
+#include <common.h>
+#include <command.h>
+#include <asm/secureboot.h>
+
+static char *get_component(unsigned long component_id)
+{
+	switch(component_id) {
+	case 1:
+		return "rbe";
+	case 2:
+		return "tep firmware";
+	case 3:
+		return "u-boot";
+	case 4:
+		return "kernel";
+	case 5:
+		return "rootfs";
+	default:
+		return "unknown";
+	}
+}
+
+int do_rollbackid_read(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	u32 ret_svn = 0;
+	u32 otp_svn = 0;
+
+	if (argc != 2)
+		return CMD_RET_USAGE;
+
+	otp_svn = simple_strtoul(argv[1], NULL, 16);
+
+	printf("Reading from component %s\n",
+		get_component(otp_svn));
+	ret_svn = chk_rollback_id(otp_svn);
+	printf("SVN value %d\n", ret_svn);
+
+	return 0;
+}
+
+static int do_rollbackid_update(struct cmd_tbl *cmdtp, int flag,
+		int argc, char * const argv[])
+{
+	u32 component;
+	u32 id_new = 0;
+	u32 old_id;
+
+	if (argc < 2)
+		return CMD_RET_USAGE;
+
+	/* get component to be updated */
+	component = simple_strtoul(argv[1], NULL, 16);
+
+	/* if SVN value is given, update using the value */
+	if (argc == 3) {
+		id_new = simple_strtoul(argv[2], NULL, 16);
+
+		if (id_new == 0)
+			return CMD_RET_USAGE;
+	}
+
+	printf("Commiting and update to component %s\n",
+		get_component(component));
+	if (id_new)
+		printf("new SVN value %08x\n", id_new);
+
+	/* read rollback ID of component */
+	old_id = chk_rollback_id(component);
+
+	/* check that old id < new id */
+	if ((id_new != 0) && (id_new < old_id)) {
+		printf("New rollback id %08x cannot be smaller than %08x\n",
+			id_new, old_id);
+		return 0;
+	}
+
+	/* same id, no need to check just return */
+	if ((id_new == old_id) && (0 != old_id))
+		return 0;
+
+	/* check that new id is a consecutive bit increase, retun error
+	 * otherwise
+	 */
+	/* ffz(new) - ffz(old) == 1? */
+
+	/* Update SVN using svn-value or increase old value */
+	if (id_new != 0)
+		upd_rollback_id(component, id_new);
+	else
+		upd_rollback_id(component, ++old_id);
+
+	return 0;
+
+}
+
+U_BOOT_CMD(
+	ssvn_update, CONFIG_SYS_MAXARGS, 0, do_rollbackid_update,
+	"Increase[update] the rollback id of the different components",
+	"zsvn_update <component> [SVN value]\n"
+	"\t- component = [RBE = 1], [TEP = 2], [U-BOOT = 3]\n"
+	"\t              [KERNEL = 4], [ROOTFS = 5]\n"
+	"\t- SVN value - [optional] rollback id value\n"
+);
+
+
+U_BOOT_CMD(
+	ssvn_read, CONFIG_SYS_MAXARGS, 0, do_rollbackid_read,
+	"Read the rollback id of the different components",
+	"zsvn_read <component>\n"
+	"\t- component = [RBE = 1], [TEP = 2], [U-BOOT = 3]\n"
+	"\t              [KERNEL = 4], [ROOTFS = 5]\n"
+);
